// Generated from rulePadGrammar.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var rulePadGrammarListener = require('./rulePadGrammarListener').rulePadGrammarListener;
var grammarFileName = "rulePadGrammar.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003<\u0320\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0003\u0002\u0007\u0002\u0096\n\u0002\f\u0002",
    "\u000e\u0002\u0099\u000b\u0002\u0003\u0002\u0005\u0002\u009c\n\u0002",
    "\u0003\u0002\u0005\u0002\u009f\n\u0002\u0003\u0002\u0007\u0002\u00a2",
    "\n\u0002\f\u0002\u000e\u0002\u00a5\u000b\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0005\u0003\u00b0\n\u0003\u0003\u0003\u0005\u0003\u00b3",
    "\n\u0003\u0003\u0003\u0007\u0003\u00b6\n\u0003\f\u0003\u000e\u0003\u00b9",
    "\u000b\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0005\u0004\u00e0\n\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007",
    "\u0005\u00e9\n\u0005\f\u0005\u000e\u0005\u00ec\u000b\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0006\u0006\u0006\u00f2\n\u0006\r\u0006",
    "\u000e\u0006\u00f3\u0003\u0006\u0003\u0006\u0006\u0006\u00f8\n\u0006",
    "\r\u0006\u000e\u0006\u00f9\u0003\u0006\u0003\u0006\u0006\u0006\u00fe",
    "\n\u0006\r\u0006\u000e\u0006\u00ff\u0003\u0006\u0003\u0006\u0006\u0006",
    "\u0104\n\u0006\r\u0006\u000e\u0006\u0105\u0003\u0006\u0006\u0006\u0109",
    "\n\u0006\r\u0006\u000e\u0006\u010a\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0006\u0006\u0110\n\u0006\r\u0006\u000e\u0006\u0111\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0006\u0006\u0117\n\u0006\r\u0006\u000e\u0006\u0118",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0006\u0006\u011e\n\u0006\r\u0006",
    "\u000e\u0006\u011f\u0003\u0006\u0005\u0006\u0123\n\u0006\u0003\u0007",
    "\u0003\u0007\u0007\u0007\u0127\n\u0007\f\u0007\u000e\u0007\u012a\u000b",
    "\u0007\u0003\u0007\u0003\u0007\u0006\u0007\u012e\n\u0007\r\u0007\u000e",
    "\u0007\u012f\u0003\u0007\u0007\u0007\u0133\n\u0007\f\u0007\u000e\u0007",
    "\u0136\u000b\u0007\u0006\u0007\u0138\n\u0007\r\u0007\u000e\u0007\u0139",
    "\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003",
    "\n\u0003\u000b\u0003\u000b\u0003\u000b\u0006\u000b\u0147\n\u000b\r\u000b",
    "\u000e\u000b\u0148\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007",
    "\f\u0151\n\f\f\f\u000e\f\u0154\u000b\f\u0003\f\u0003\f\u0003\r\u0003",
    "\r\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u015d\n\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003",
    "\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003",
    "\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0005\u0015\u016f\n\u0015",
    "\u0003\u0016\u0003\u0016\u0005\u0016\u0173\n\u0016\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0005\u0018\u017a\n\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0005\u0019\u0182\n\u0019\u0003\u001a\u0003\u001a\u0005\u001a\u0186",
    "\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0005\u001b\u018e\n\u001b\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u019b\n\u001d\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u01a8\n",
    "\u001f\u0003 \u0003 \u0005 \u01ac\n \u0003 \u0005 \u01af\n \u0003!\u0003",
    "!\u0003!\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003#",
    "\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0005#\u01c6\n#\u0005#\u01c8\n#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0007#\u01d0\n#\f#\u000e#\u01d3\u000b#\u0003$\u0003$\u0005",
    "$\u01d7\n$\u0003$\u0005$\u01da\n$\u0003%\u0003%\u0003%\u0003&\u0003",
    "&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0005\'\u01ed\n\'\u0005\'\u01ef\n\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u01f7\n\'\f\'\u000e",
    "\'\u01fa\u000b\'\u0003(\u0003(\u0005(\u01fe\n(\u0003(\u0005(\u0201\n",
    "(\u0003)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0005+\u0217\n+\u0005+\u0219\n+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0007+\u0221\n+\f+\u000e+\u0224\u000b+\u0003,\u0003,\u0005",
    ",\u0228\n,\u0003-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0005.\u0234\n.\u0005.\u0236\n.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0007.\u023e\n.\f.\u000e.\u0241\u000b.\u0003/\u0003",
    "/\u0005/\u0245\n/\u00030\u00030\u00030\u00030\u00030\u00030\u00050\u024d",
    "\n0\u00031\u00031\u00051\u0251\n1\u00032\u00032\u00032\u00033\u0003",
    "3\u00053\u0258\n3\u00034\u00034\u00034\u00035\u00035\u00055\u025f\n",
    "5\u00036\u00036\u00036\u00037\u00037\u00057\u0266\n7\u00037\u00057\u0269",
    "\n7\u00038\u00038\u00038\u00038\u00058\u026f\n8\u00039\u00039\u0003",
    "9\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0005:\u0280\n:\u0005:\u0282\n:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0007:\u028a\n:\f:\u000e:\u028d\u000b:\u0003",
    ";\u0003;\u0005;\u0291\n;\u0003;\u0005;\u0294\n;\u0003<\u0003<\u0003",
    "<\u0003<\u0005<\u029a\n<\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0005>\u02a6\n>\u0005>\u02a8\n>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0007>\u02b0\n>\f>\u000e>\u02b3\u000b",
    ">\u0003?\u0003?\u0005?\u02b7\n?\u0003@\u0003@\u0003@\u0003A\u0003A\u0005",
    "A\u02be\nA\u0003A\u0005A\u02c1\nA\u0003B\u0003B\u0003B\u0003C\u0003",
    "C\u0003C\u0003D\u0003D\u0005D\u02cb\nD\u0003E\u0003E\u0003E\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u02e2\nF\u0005F\u02e4",
    "\nF\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0007F\u02ec\nF\fF\u000e",
    "F\u02ef\u000bF\u0003G\u0003G\u0005G\u02f3\nG\u0003G\u0005G\u02f6\nG",
    "\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0005J\u0311\nJ\u0005J\u0313\n",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0007J\u031b\nJ\fJ\u000e",
    "J\u031e\u000bJ\u0003J\u0002\nDLTZrz\u008a\u0092K\u0002\u0004\u0006\b",
    "\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.",
    "02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0002\u0004\u0004\u0002\t\u000f\'(\u0003",
    "\u0002\u0010\u001d\u0002\u0377\u0002\u009b\u0003\u0002\u0002\u0002\u0004",
    "\u00af\u0003\u0002\u0002\u0002\u0006\u00df\u0003\u0002\u0002\u0002\b",
    "\u00e1\u0003\u0002\u0002\u0002\n\u0122\u0003\u0002\u0002\u0002\f\u0124",
    "\u0003\u0002\u0002\u0002\u000e\u013d\u0003\u0002\u0002\u0002\u0010\u013f",
    "\u0003\u0002\u0002\u0002\u0012\u0141\u0003\u0002\u0002\u0002\u0014\u0146",
    "\u0003\u0002\u0002\u0002\u0016\u0152\u0003\u0002\u0002\u0002\u0018\u0157",
    "\u0003\u0002\u0002\u0002\u001a\u0159\u0003\u0002\u0002\u0002\u001c\u0160",
    "\u0003\u0002\u0002\u0002\u001e\u0162\u0003\u0002\u0002\u0002 \u0164",
    "\u0003\u0002\u0002\u0002\"\u0166\u0003\u0002\u0002\u0002$\u0168\u0003",
    "\u0002\u0002\u0002&\u016a\u0003\u0002\u0002\u0002(\u016e\u0003\u0002",
    "\u0002\u0002*\u0170\u0003\u0002\u0002\u0002,\u0174\u0003\u0002\u0002",
    "\u0002.\u0177\u0003\u0002\u0002\u00020\u0181\u0003\u0002\u0002\u0002",
    "2\u0183\u0003\u0002\u0002\u00024\u018d\u0003\u0002\u0002\u00026\u018f",
    "\u0003\u0002\u0002\u00028\u0192\u0003\u0002\u0002\u0002:\u019c\u0003",
    "\u0002\u0002\u0002<\u019f\u0003\u0002\u0002\u0002>\u01a9\u0003\u0002",
    "\u0002\u0002@\u01b0\u0003\u0002\u0002\u0002B\u01b3\u0003\u0002\u0002",
    "\u0002D\u01c7\u0003\u0002\u0002\u0002F\u01d4\u0003\u0002\u0002\u0002",
    "H\u01db\u0003\u0002\u0002\u0002J\u01de\u0003\u0002\u0002\u0002L\u01ee",
    "\u0003\u0002\u0002\u0002N\u01fb\u0003\u0002\u0002\u0002P\u0202\u0003",
    "\u0002\u0002\u0002R\u0205\u0003\u0002\u0002\u0002T\u0218\u0003\u0002",
    "\u0002\u0002V\u0225\u0003\u0002\u0002\u0002X\u0229\u0003\u0002\u0002",
    "\u0002Z\u0235\u0003\u0002\u0002\u0002\\\u0242\u0003\u0002\u0002\u0002",
    "^\u024c\u0003\u0002\u0002\u0002`\u024e\u0003\u0002\u0002\u0002b\u0252",
    "\u0003\u0002\u0002\u0002d\u0255\u0003\u0002\u0002\u0002f\u0259\u0003",
    "\u0002\u0002\u0002h\u025c\u0003\u0002\u0002\u0002j\u0260\u0003\u0002",
    "\u0002\u0002l\u0263\u0003\u0002\u0002\u0002n\u026a\u0003\u0002\u0002",
    "\u0002p\u0270\u0003\u0002\u0002\u0002r\u0281\u0003\u0002\u0002\u0002",
    "t\u028e\u0003\u0002\u0002\u0002v\u0295\u0003\u0002\u0002\u0002x\u029b",
    "\u0003\u0002\u0002\u0002z\u02a7\u0003\u0002\u0002\u0002|\u02b4\u0003",
    "\u0002\u0002\u0002~\u02b8\u0003\u0002\u0002\u0002\u0080\u02bb\u0003",
    "\u0002\u0002\u0002\u0082\u02c2\u0003\u0002\u0002\u0002\u0084\u02c5\u0003",
    "\u0002\u0002\u0002\u0086\u02c8\u0003\u0002\u0002\u0002\u0088\u02cc\u0003",
    "\u0002\u0002\u0002\u008a\u02e3\u0003\u0002\u0002\u0002\u008c\u02f0\u0003",
    "\u0002\u0002\u0002\u008e\u02f7\u0003\u0002\u0002\u0002\u0090\u02fa\u0003",
    "\u0002\u0002\u0002\u0092\u0312\u0003\u0002\u0002\u0002\u0094\u0096\u0005",
    "\u0012\n\u0002\u0095\u0094\u0003\u0002\u0002\u0002\u0096\u0099\u0003",
    "\u0002\u0002\u0002\u0097\u0095\u0003\u0002\u0002\u0002\u0097\u0098\u0003",
    "\u0002\u0002\u0002\u0098\u009c\u0003\u0002\u0002\u0002\u0099\u0097\u0003",
    "\u0002\u0002\u0002\u009a\u009c\u0005\u0006\u0004\u0002\u009b\u0097\u0003",
    "\u0002\u0002\u0002\u009b\u009a\u0003\u0002\u0002\u0002\u009c\u009e\u0003",
    "\u0002\u0002\u0002\u009d\u009f\u0005\u0010\t\u0002\u009e\u009d\u0003",
    "\u0002\u0002\u0002\u009e\u009f\u0003\u0002\u0002\u0002\u009f\u00a3\u0003",
    "\u0002\u0002\u0002\u00a0\u00a2\u0007&\u0002\u0002\u00a1\u00a0\u0003",
    "\u0002\u0002\u0002\u00a2\u00a5\u0003\u0002\u0002\u0002\u00a3\u00a1\u0003",
    "\u0002\u0002\u0002\u00a3\u00a4\u0003\u0002\u0002\u0002\u00a4\u00a6\u0003",
    "\u0002\u0002\u0002\u00a5\u00a3\u0003\u0002\u0002\u0002\u00a6\u00a7\u0007",
    "\u0002\u0002\u0003\u00a7\u0003\u0003\u0002\u0002\u0002\u00a8\u00b0\u0005",
    "> \u0002\u00a9\u00b0\u0005F$\u0002\u00aa\u00b0\u0005N(\u0002\u00ab\u00b0",
    "\u0005\u0086D\u0002\u00ac\u00b0\u0005V,\u0002\u00ad\u00b0\u0005l7\u0002",
    "\u00ae\u00b0\u0005\u008cG\u0002\u00af\u00a8\u0003\u0002\u0002\u0002",
    "\u00af\u00a9\u0003\u0002\u0002\u0002\u00af\u00aa\u0003\u0002\u0002\u0002",
    "\u00af\u00ab\u0003\u0002\u0002\u0002\u00af\u00ac\u0003\u0002\u0002\u0002",
    "\u00af\u00ad\u0003\u0002\u0002\u0002\u00af\u00ae\u0003\u0002\u0002\u0002",
    "\u00b0\u00b2\u0003\u0002\u0002\u0002\u00b1\u00b3\u0005\u0010\t\u0002",
    "\u00b2\u00b1\u0003\u0002\u0002\u0002\u00b2\u00b3\u0003\u0002\u0002\u0002",
    "\u00b3\u00b7\u0003\u0002\u0002\u0002\u00b4\u00b6\u0007&\u0002\u0002",
    "\u00b5\u00b4\u0003\u0002\u0002\u0002\u00b6\u00b9\u0003\u0002\u0002\u0002",
    "\u00b7\u00b5\u0003\u0002\u0002\u0002\u00b7\u00b8\u0003\u0002\u0002\u0002",
    "\u00b8\u00ba\u0003\u0002\u0002\u0002\u00b9\u00b7\u0003\u0002\u0002\u0002",
    "\u00ba\u00bb\u0007\u0002\u0002\u0003\u00bb\u0005\u0003\u0002\u0002\u0002",
    "\u00bc\u00bd\u0005> \u0002\u00bd\u00be\u0005\u001c\u000f\u0002\u00be",
    "\u00bf\u0005$\u0013\u0002\u00bf\u00c0\u0005D#\u0002\u00c0\u00e0\u0003",
    "\u0002\u0002\u0002\u00c1\u00c2\u0005F$\u0002\u00c2\u00c3\u0005\u001c",
    "\u000f\u0002\u00c3\u00c4\u0005$\u0013\u0002\u00c4\u00c5\u0005L\'\u0002",
    "\u00c5\u00e0\u0003\u0002\u0002\u0002\u00c6\u00c7\u0005N(\u0002\u00c7",
    "\u00c8\u0005\u001c\u000f\u0002\u00c8\u00c9\u0005$\u0013\u0002\u00c9",
    "\u00ca\u0005T+\u0002\u00ca\u00e0\u0003\u0002\u0002\u0002\u00cb\u00cc",
    "\u0005\u0086D\u0002\u00cc\u00cd\u0005\u001c\u000f\u0002\u00cd\u00ce",
    "\u0005$\u0013\u0002\u00ce\u00cf\u0005\u008aF\u0002\u00cf\u00e0\u0003",
    "\u0002\u0002\u0002\u00d0\u00d1\u0005V,\u0002\u00d1\u00d2\u0005\u001c",
    "\u000f\u0002\u00d2\u00d3\u0005$\u0013\u0002\u00d3\u00d4\u0005Z.\u0002",
    "\u00d4\u00e0\u0003\u0002\u0002\u0002\u00d5\u00d6\u0005l7\u0002\u00d6",
    "\u00d7\u0005\u001c\u000f\u0002\u00d7\u00d8\u0005$\u0013\u0002\u00d8",
    "\u00d9\u0005r:\u0002\u00d9\u00e0\u0003\u0002\u0002\u0002\u00da\u00db",
    "\u0005\u008cG\u0002\u00db\u00dc\u0005\u001c\u000f\u0002\u00dc\u00dd",
    "\u0005$\u0013\u0002\u00dd\u00de\u0005\u0092J\u0002\u00de\u00e0\u0003",
    "\u0002\u0002\u0002\u00df\u00bc\u0003\u0002\u0002\u0002\u00df\u00c1\u0003",
    "\u0002\u0002\u0002\u00df\u00c6\u0003\u0002\u0002\u0002\u00df\u00cb\u0003",
    "\u0002\u0002\u0002\u00df\u00d0\u0003\u0002\u0002\u0002\u00df\u00d5\u0003",
    "\u0002\u0002\u0002\u00df\u00da\u0003\u0002\u0002\u0002\u00e0\u0007\u0003",
    "\u0002\u0002\u0002\u00e1\u00ea\u0007\u0003\u0002\u0002\u00e2\u00e3\u0005",
    "\n\u0006\u0002\u00e3\u00e4\u0007\u0004\u0002\u0002\u00e4\u00e9\u0003",
    "\u0002\u0002\u0002\u00e5\u00e6\u0005\n\u0006\u0002\u00e6\u00e7\u0007",
    "\u0005\u0002\u0002\u00e7\u00e9\u0003\u0002\u0002\u0002\u00e8\u00e2\u0003",
    "\u0002\u0002\u0002\u00e8\u00e5\u0003\u0002\u0002\u0002\u00e9\u00ec\u0003",
    "\u0002\u0002\u0002\u00ea\u00e8\u0003\u0002\u0002\u0002\u00ea\u00eb\u0003",
    "\u0002\u0002\u0002\u00eb\u00ed\u0003\u0002\u0002\u0002\u00ec\u00ea\u0003",
    "\u0002\u0002\u0002\u00ed\u00ee\u0005\n\u0006\u0002\u00ee\u00ef\u0007",
    "\u0003\u0002\u0002\u00ef\t\u0003\u0002\u0002\u0002\u00f0\u00f2\u0007",
    "%\u0002\u0002\u00f1\u00f0\u0003\u0002\u0002\u0002\u00f2\u00f3\u0003",
    "\u0002\u0002\u0002\u00f3\u00f1\u0003\u0002\u0002\u0002\u00f3\u00f4\u0003",
    "\u0002\u0002\u0002\u00f4\u0123\u0003\u0002\u0002\u0002\u00f5\u00f7\u0007",
    "\u0006\u0002\u0002\u00f6\u00f8\u0007%\u0002\u0002\u00f7\u00f6\u0003",
    "\u0002\u0002\u0002\u00f8\u00f9\u0003\u0002\u0002\u0002\u00f9\u00f7\u0003",
    "\u0002\u0002\u0002\u00f9\u00fa\u0003\u0002\u0002\u0002\u00fa\u0123\u0003",
    "\u0002\u0002\u0002\u00fb\u00fd\u0007\u0007\u0002\u0002\u00fc\u00fe\u0007",
    "%\u0002\u0002\u00fd\u00fc\u0003\u0002\u0002\u0002\u00fe\u00ff\u0003",
    "\u0002\u0002\u0002\u00ff\u00fd\u0003\u0002\u0002\u0002\u00ff\u0100\u0003",
    "\u0002\u0002\u0002\u0100\u0123\u0003\u0002\u0002\u0002\u0101\u0103\u0007",
    "\b\u0002\u0002\u0102\u0104\u0007%\u0002\u0002\u0103\u0102\u0003\u0002",
    "\u0002\u0002\u0104\u0105\u0003\u0002\u0002\u0002\u0105\u0103\u0003\u0002",
    "\u0002\u0002\u0105\u0106\u0003\u0002\u0002\u0002\u0106\u0123\u0003\u0002",
    "\u0002\u0002\u0107\u0109\u0007%\u0002\u0002\u0108\u0107\u0003\u0002",
    "\u0002\u0002\u0109\u010a\u0003\u0002\u0002\u0002\u010a\u0108\u0003\u0002",
    "\u0002\u0002\u010a\u010b\u0003\u0002\u0002\u0002\u010b\u010c\u0003\u0002",
    "\u0002\u0002\u010c\u0123\u0007\u0007\u0002\u0002\u010d\u010f\u0007\u0006",
    "\u0002\u0002\u010e\u0110\u0007%\u0002\u0002\u010f\u010e\u0003\u0002",
    "\u0002\u0002\u0110\u0111\u0003\u0002\u0002\u0002\u0111\u010f\u0003\u0002",
    "\u0002\u0002\u0111\u0112\u0003\u0002\u0002\u0002\u0112\u0113\u0003\u0002",
    "\u0002\u0002\u0113\u0123\u0007\u0007\u0002\u0002\u0114\u0116\u0007\u0007",
    "\u0002\u0002\u0115\u0117\u0007%\u0002\u0002\u0116\u0115\u0003\u0002",
    "\u0002\u0002\u0117\u0118\u0003\u0002\u0002\u0002\u0118\u0116\u0003\u0002",
    "\u0002\u0002\u0118\u0119\u0003\u0002\u0002\u0002\u0119\u011a\u0003\u0002",
    "\u0002\u0002\u011a\u0123\u0007\u0007\u0002\u0002\u011b\u011d\u0007\b",
    "\u0002\u0002\u011c\u011e\u0007%\u0002\u0002\u011d\u011c\u0003\u0002",
    "\u0002\u0002\u011e\u011f\u0003\u0002\u0002\u0002\u011f\u011d\u0003\u0002",
    "\u0002\u0002\u011f\u0120\u0003\u0002\u0002\u0002\u0120\u0121\u0003\u0002",
    "\u0002\u0002\u0121\u0123\u0007\u0007\u0002\u0002\u0122\u00f1\u0003\u0002",
    "\u0002\u0002\u0122\u00f5\u0003\u0002\u0002\u0002\u0122\u00fb\u0003\u0002",
    "\u0002\u0002\u0122\u0101\u0003\u0002\u0002\u0002\u0122\u0108\u0003\u0002",
    "\u0002\u0002\u0122\u010d\u0003\u0002\u0002\u0002\u0122\u0114\u0003\u0002",
    "\u0002\u0002\u0122\u011b\u0003\u0002\u0002\u0002\u0123\u000b\u0003\u0002",
    "\u0002\u0002\u0124\u0137\u0007\u0003\u0002\u0002\u0125\u0127\u0007%",
    "\u0002\u0002\u0126\u0125\u0003\u0002\u0002\u0002\u0127\u012a\u0003\u0002",
    "\u0002\u0002\u0128\u0126\u0003\u0002\u0002\u0002\u0128\u0129\u0003\u0002",
    "\u0002\u0002\u0129\u012d\u0003\u0002\u0002\u0002\u012a\u0128\u0003\u0002",
    "\u0002\u0002\u012b\u012e\u0005\u000e\b\u0002\u012c\u012e\u0007$\u0002",
    "\u0002\u012d\u012b\u0003\u0002\u0002\u0002\u012d\u012c\u0003\u0002\u0002",
    "\u0002\u012e\u012f\u0003\u0002\u0002\u0002\u012f\u012d\u0003\u0002\u0002",
    "\u0002\u012f\u0130\u0003\u0002\u0002\u0002\u0130\u0134\u0003\u0002\u0002",
    "\u0002\u0131\u0133\u0007%\u0002\u0002\u0132\u0131\u0003\u0002\u0002",
    "\u0002\u0133\u0136\u0003\u0002\u0002\u0002\u0134\u0132\u0003\u0002\u0002",
    "\u0002\u0134\u0135\u0003\u0002\u0002\u0002\u0135\u0138\u0003\u0002\u0002",
    "\u0002\u0136\u0134\u0003\u0002\u0002\u0002\u0137\u0128\u0003\u0002\u0002",
    "\u0002\u0138\u0139\u0003\u0002\u0002\u0002\u0139\u0137\u0003\u0002\u0002",
    "\u0002\u0139\u013a\u0003\u0002\u0002\u0002\u013a\u013b\u0003\u0002\u0002",
    "\u0002\u013b\u013c\u0007\u0003\u0002\u0002\u013c\r\u0003\u0002\u0002",
    "\u0002\u013d\u013e\t\u0002\u0002\u0002\u013e\u000f\u0003\u0002\u0002",
    "\u0002\u013f\u0140\u0007\t\u0002\u0002\u0140\u0011\u0003\u0002\u0002",
    "\u0002\u0141\u0142\u0007&\u0002\u0002\u0142\u0013\u0003\u0002\u0002",
    "\u0002\u0143\u0147\u0007%\u0002\u0002\u0144\u0147\u0005\u000e\b\u0002",
    "\u0145\u0147\u0007$\u0002\u0002\u0146\u0143\u0003\u0002\u0002\u0002",
    "\u0146\u0144\u0003\u0002\u0002\u0002\u0146\u0145\u0003\u0002\u0002\u0002",
    "\u0147\u0148\u0003\u0002\u0002\u0002\u0148\u0146\u0003\u0002\u0002\u0002",
    "\u0148\u0149\u0003\u0002\u0002\u0002\u0149\u0015\u0003\u0002\u0002\u0002",
    "\u014a\u014b\u0005\u0014\u000b\u0002\u014b\u014c\u0007\u0004\u0002\u0002",
    "\u014c\u0151\u0003\u0002\u0002\u0002\u014d\u014e\u0005\u0014\u000b\u0002",
    "\u014e\u014f\u0007\u0005\u0002\u0002\u014f\u0151\u0003\u0002\u0002\u0002",
    "\u0150\u014a\u0003\u0002\u0002\u0002\u0150\u014d\u0003\u0002\u0002\u0002",
    "\u0151\u0154\u0003\u0002\u0002\u0002\u0152\u0150\u0003\u0002\u0002\u0002",
    "\u0152\u0153\u0003\u0002\u0002\u0002\u0153\u0155\u0003\u0002\u0002\u0002",
    "\u0154\u0152\u0003\u0002\u0002\u0002\u0155\u0156\u0005\u0014\u000b\u0002",
    "\u0156\u0017\u0003\u0002\u0002\u0002\u0157\u0158\t\u0003\u0002\u0002",
    "\u0158\u0019\u0003\u0002\u0002\u0002\u0159\u015a\u0007\u0003\u0002\u0002",
    "\u015a\u015c\u0005\u0018\r\u0002\u015b\u015d\u0005\u0016\f\u0002\u015c",
    "\u015b\u0003\u0002\u0002\u0002\u015c\u015d\u0003\u0002\u0002\u0002\u015d",
    "\u015e\u0003\u0002\u0002\u0002\u015e\u015f\u0007\u0003\u0002\u0002\u015f",
    "\u001b\u0003\u0002\u0002\u0002\u0160\u0161\u0007\u001e\u0002\u0002\u0161",
    "\u001d\u0003\u0002\u0002\u0002\u0162\u0163\u0007\u001f\u0002\u0002\u0163",
    "\u001f\u0003\u0002\u0002\u0002\u0164\u0165\u0007 \u0002\u0002\u0165",
    "!\u0003\u0002\u0002\u0002\u0166\u0167\u0007!\u0002\u0002\u0167#\u0003",
    "\u0002\u0002\u0002\u0168\u0169\u0007\"\u0002\u0002\u0169%\u0003\u0002",
    "\u0002\u0002\u016a\u016b\u0007#\u0002\u0002\u016b\'\u0003\u0002\u0002",
    "\u0002\u016c\u016f\u0005 \u0011\u0002\u016d\u016f\u0005\"\u0012\u0002",
    "\u016e\u016c\u0003\u0002\u0002\u0002\u016e\u016d\u0003\u0002\u0002\u0002",
    "\u016f)\u0003\u0002\u0002\u0002\u0170\u0172\u0007)\u0002\u0002\u0171",
    "\u0173\u0005,\u0017\u0002\u0172\u0171\u0003\u0002\u0002\u0002\u0172",
    "\u0173\u0003\u0002\u0002\u0002\u0173+\u0003\u0002\u0002\u0002\u0174",
    "\u0175\u0005\b\u0005\u0002\u0175\u0176\u0007$\u0002\u0002\u0176-\u0003",
    "\u0002\u0002\u0002\u0177\u0179\u0007)\u0002\u0002\u0178\u017a\u0005",
    "0\u0019\u0002\u0179\u0178\u0003\u0002\u0002\u0002\u0179\u017a\u0003",
    "\u0002\u0002\u0002\u017a/\u0003\u0002\u0002\u0002\u017b\u017c\u0005",
    "\f\u0007\u0002\u017c\u017d\u0007$\u0002\u0002\u017d\u0182\u0003\u0002",
    "\u0002\u0002\u017e\u017f\u0005\b\u0005\u0002\u017f\u0180\u0007$\u0002",
    "\u0002\u0180\u0182\u0003\u0002\u0002\u0002\u0181\u017b\u0003\u0002\u0002",
    "\u0002\u0181\u017e\u0003\u0002\u0002\u0002\u01821\u0003\u0002\u0002",
    "\u0002\u0183\u0185\u0007*\u0002\u0002\u0184\u0186\u00054\u001b\u0002",
    "\u0185\u0184\u0003\u0002\u0002\u0002\u0185\u0186\u0003\u0002\u0002\u0002",
    "\u01863\u0003\u0002\u0002\u0002\u0187\u0188\u0005\f\u0007\u0002\u0188",
    "\u0189\u0007$\u0002\u0002\u0189\u018e\u0003\u0002\u0002\u0002\u018a",
    "\u018b\u0005\b\u0005\u0002\u018b\u018c\u0007$\u0002\u0002\u018c\u018e",
    "\u0003\u0002\u0002\u0002\u018d\u0187\u0003\u0002\u0002\u0002\u018d\u018a",
    "\u0003\u0002\u0002\u0002\u018e5\u0003\u0002\u0002\u0002\u018f\u0190",
    "\u0007+\u0002\u0002\u0190\u0191\u00058\u001d\u0002\u01917\u0003\u0002",
    "\u0002\u0002\u0192\u019a\u0005\u001e\u0010\u0002\u0193\u0194\u0005\f",
    "\u0007\u0002\u0194\u0195\u0007$\u0002\u0002\u0195\u019b\u0003\u0002",
    "\u0002\u0002\u0196\u0197\u0005\b\u0005\u0002\u0197\u0198\u0007$\u0002",
    "\u0002\u0198\u019b\u0003\u0002\u0002\u0002\u0199\u019b\u0007,\u0002",
    "\u0002\u019a\u0193\u0003\u0002\u0002\u0002\u019a\u0196\u0003\u0002\u0002",
    "\u0002\u019a\u0199\u0003\u0002\u0002\u0002\u019b9\u0003\u0002\u0002",
    "\u0002\u019c\u019d\u0007-\u0002\u0002\u019d\u019e\u0005<\u001f\u0002",
    "\u019e;\u0003\u0002\u0002\u0002\u019f\u01a7\u0005\u001e\u0010\u0002",
    "\u01a0\u01a1\u0005\f\u0007\u0002\u01a1\u01a2\u0007$\u0002\u0002\u01a2",
    "\u01a8\u0003\u0002\u0002\u0002\u01a3\u01a4\u0005\b\u0005\u0002\u01a4",
    "\u01a5\u0007$\u0002\u0002\u01a5\u01a8\u0003\u0002\u0002\u0002\u01a6",
    "\u01a8\u0007.\u0002\u0002\u01a7\u01a0\u0003\u0002\u0002\u0002\u01a7",
    "\u01a3\u0003\u0002\u0002\u0002\u01a7\u01a6\u0003\u0002\u0002\u0002\u01a8",
    "=\u0003\u0002\u0002\u0002\u01a9\u01ab\u0007/\u0002\u0002\u01aa\u01ac",
    "\u0005B\"\u0002\u01ab\u01aa\u0003\u0002\u0002\u0002\u01ab\u01ac\u0003",
    "\u0002\u0002\u0002\u01ac\u01ae\u0003\u0002\u0002\u0002\u01ad\u01af\u0005",
    "@!\u0002\u01ae\u01ad\u0003\u0002\u0002\u0002\u01ae\u01af\u0003\u0002",
    "\u0002\u0002\u01af?\u0003\u0002\u0002\u0002\u01b0\u01b1\u0005\u001e",
    "\u0010\u0002\u01b1\u01b2\u0005\u0086D\u0002\u01b2A\u0003\u0002\u0002",
    "\u0002\u01b3\u01b4\u0005&\u0014\u0002\u01b4\u01b5\u0005D#\u0002\u01b5",
    "C\u0003\u0002\u0002\u0002\u01b6\u01b7\b#\u0001\u0002\u01b7\u01b8\u0007",
    "\'\u0002\u0002\u01b8\u01b9\u0005D#\u0002\u01b9\u01ba\u0007(\u0002\u0002",
    "\u01ba\u01c8\u0003\u0002\u0002\u0002\u01bb\u01c6\u00052\u001a\u0002",
    "\u01bc\u01c6\u0005`1\u0002\u01bd\u01c6\u0005d3\u0002\u01be\u01c6\u0005",
    "\\/\u0002\u01bf\u01c6\u0005*\u0016\u0002\u01c0\u01c6\u0005V,\u0002\u01c1",
    "\u01c6\u0005h5\u0002\u01c2\u01c6\u0005l7\u0002\u01c3\u01c6\u0005t;\u0002",
    "\u01c4\u01c6\u0005\u001a\u000e\u0002\u01c5\u01bb\u0003\u0002\u0002\u0002",
    "\u01c5\u01bc\u0003\u0002\u0002\u0002\u01c5\u01bd\u0003\u0002\u0002\u0002",
    "\u01c5\u01be\u0003\u0002\u0002\u0002\u01c5\u01bf\u0003\u0002\u0002\u0002",
    "\u01c5\u01c0\u0003\u0002\u0002\u0002\u01c5\u01c1\u0003\u0002\u0002\u0002",
    "\u01c5\u01c2\u0003\u0002\u0002\u0002\u01c5\u01c3\u0003\u0002\u0002\u0002",
    "\u01c5\u01c4\u0003\u0002\u0002\u0002\u01c6\u01c8\u0003\u0002\u0002\u0002",
    "\u01c7\u01b6\u0003\u0002\u0002\u0002\u01c7\u01c5\u0003\u0002\u0002\u0002",
    "\u01c8\u01d1\u0003\u0002\u0002\u0002\u01c9\u01ca\f\u0005\u0002\u0002",
    "\u01ca\u01cb\u0005(\u0015\u0002\u01cb\u01cc\u0005D#\u0006\u01cc\u01d0",
    "\u0003\u0002\u0002\u0002\u01cd\u01ce\f\u0003\u0002\u0002\u01ce\u01d0",
    "\u0007$\u0002\u0002\u01cf\u01c9\u0003\u0002\u0002\u0002\u01cf\u01cd",
    "\u0003\u0002\u0002\u0002\u01d0\u01d3\u0003\u0002\u0002\u0002\u01d1\u01cf",
    "\u0003\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002\u0002\u0002\u01d2E",
    "\u0003\u0002\u0002\u0002\u01d3\u01d1\u0003\u0002\u0002\u0002\u01d4\u01d6",
    "\u00070\u0002\u0002\u01d5\u01d7\u0005J&\u0002\u01d6\u01d5\u0003\u0002",
    "\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d7\u01d9\u0003\u0002",
    "\u0002\u0002\u01d8\u01da\u0005H%\u0002\u01d9\u01d8\u0003\u0002\u0002",
    "\u0002\u01d9\u01da\u0003\u0002\u0002\u0002\u01daG\u0003\u0002\u0002",
    "\u0002\u01db\u01dc\u0005\u001e\u0010\u0002\u01dc\u01dd\u0005\u0086D",
    "\u0002\u01ddI\u0003\u0002\u0002\u0002\u01de\u01df\u0005&\u0014\u0002",
    "\u01df\u01e0\u0005L\'\u0002\u01e0K\u0003\u0002\u0002\u0002\u01e1\u01e2",
    "\b\'\u0001\u0002\u01e2\u01e3\u0007\'\u0002\u0002\u01e3\u01e4\u0005L",
    "\'\u0002\u01e4\u01e5\u0007(\u0002\u0002\u01e5\u01ef\u0003\u0002\u0002",
    "\u0002\u01e6\u01ed\u00052\u001a\u0002\u01e7\u01ed\u0005`1\u0002\u01e8",
    "\u01ed\u0005d3\u0002\u01e9\u01ed\u0005\\/\u0002\u01ea\u01ed\u0005*\u0016",
    "\u0002\u01eb\u01ed\u0005V,\u0002\u01ec\u01e6\u0003\u0002\u0002\u0002",
    "\u01ec\u01e7\u0003\u0002\u0002\u0002\u01ec\u01e8\u0003\u0002\u0002\u0002",
    "\u01ec\u01e9\u0003\u0002\u0002\u0002\u01ec\u01ea\u0003\u0002\u0002\u0002",
    "\u01ec\u01eb\u0003\u0002\u0002\u0002\u01ed\u01ef\u0003\u0002\u0002\u0002",
    "\u01ee\u01e1\u0003\u0002\u0002\u0002\u01ee\u01ec\u0003\u0002\u0002\u0002",
    "\u01ef\u01f8\u0003\u0002\u0002\u0002\u01f0\u01f1\f\u0005\u0002\u0002",
    "\u01f1\u01f2\u0005(\u0015\u0002\u01f2\u01f3\u0005L\'\u0006\u01f3\u01f7",
    "\u0003\u0002\u0002\u0002\u01f4\u01f5\f\u0003\u0002\u0002\u01f5\u01f7",
    "\u0007$\u0002\u0002\u01f6\u01f0\u0003\u0002\u0002\u0002\u01f6\u01f4",
    "\u0003\u0002\u0002\u0002\u01f7\u01fa\u0003\u0002\u0002\u0002\u01f8\u01f6",
    "\u0003\u0002\u0002\u0002\u01f8\u01f9\u0003\u0002\u0002\u0002\u01f9M",
    "\u0003\u0002\u0002\u0002\u01fa\u01f8\u0003\u0002\u0002\u0002\u01fb\u01fd",
    "\u00071\u0002\u0002\u01fc\u01fe\u0005R*\u0002\u01fd\u01fc\u0003\u0002",
    "\u0002\u0002\u01fd\u01fe\u0003\u0002\u0002\u0002\u01fe\u0200\u0003\u0002",
    "\u0002\u0002\u01ff\u0201\u0005P)\u0002\u0200\u01ff\u0003\u0002\u0002",
    "\u0002\u0200\u0201\u0003\u0002\u0002\u0002\u0201O\u0003\u0002\u0002",
    "\u0002\u0202\u0203\u0005\u001e\u0010\u0002\u0203\u0204\u0005\u0086D",
    "\u0002\u0204Q\u0003\u0002\u0002\u0002\u0205\u0206\u0005&\u0014\u0002",
    "\u0206\u0207\u0005T+\u0002\u0207S\u0003\u0002\u0002\u0002\u0208\u0209",
    "\b+\u0001\u0002\u0209\u020a\u0007\'\u0002\u0002\u020a\u020b\u0005T+",
    "\u0002\u020b\u020c\u0007(\u0002\u0002\u020c\u0219\u0003\u0002\u0002",
    "\u0002\u020d\u0217\u00052\u001a\u0002\u020e\u0217\u0005`1\u0002\u020f",
    "\u0217\u0005d3\u0002\u0210\u0217\u0005*\u0016\u0002\u0211\u0217\u0005",
    "V,\u0002\u0212\u0217\u0005h5\u0002\u0213\u0217\u0005l7\u0002\u0214\u0217",
    "\u0005t;\u0002\u0215\u0217\u0005\u001a\u000e\u0002\u0216\u020d\u0003",
    "\u0002\u0002\u0002\u0216\u020e\u0003\u0002\u0002\u0002\u0216\u020f\u0003",
    "\u0002\u0002\u0002\u0216\u0210\u0003\u0002\u0002\u0002\u0216\u0211\u0003",
    "\u0002\u0002\u0002\u0216\u0212\u0003\u0002\u0002\u0002\u0216\u0213\u0003",
    "\u0002\u0002\u0002\u0216\u0214\u0003\u0002\u0002\u0002\u0216\u0215\u0003",
    "\u0002\u0002\u0002\u0217\u0219\u0003\u0002\u0002\u0002\u0218\u0208\u0003",
    "\u0002\u0002\u0002\u0218\u0216\u0003\u0002\u0002\u0002\u0219\u0222\u0003",
    "\u0002\u0002\u0002\u021a\u021b\f\u0005\u0002\u0002\u021b\u021c\u0005",
    "(\u0015\u0002\u021c\u021d\u0005T+\u0006\u021d\u0221\u0003\u0002\u0002",
    "\u0002\u021e\u021f\f\u0003\u0002\u0002\u021f\u0221\u0007$\u0002\u0002",
    "\u0220\u021a\u0003\u0002\u0002\u0002\u0220\u021e\u0003\u0002\u0002\u0002",
    "\u0221\u0224\u0003\u0002\u0002\u0002\u0222\u0220\u0003\u0002\u0002\u0002",
    "\u0222\u0223\u0003\u0002\u0002\u0002\u0223U\u0003\u0002\u0002\u0002",
    "\u0224\u0222\u0003\u0002\u0002\u0002\u0225\u0227\u00072\u0002\u0002",
    "\u0226\u0228\u0005X-\u0002\u0227\u0226\u0003\u0002\u0002\u0002\u0227",
    "\u0228\u0003\u0002\u0002\u0002\u0228W\u0003\u0002\u0002\u0002\u0229",
    "\u022a\u0005&\u0014\u0002\u022a\u022b\u0005Z.\u0002\u022bY\u0003\u0002",
    "\u0002\u0002\u022c\u022d\b.\u0001\u0002\u022d\u022e\u0007\'\u0002\u0002",
    "\u022e\u022f\u0005Z.\u0002\u022f\u0230\u0007(\u0002\u0002\u0230\u0236",
    "\u0003\u0002\u0002\u0002\u0231\u0234\u0005\\/\u0002\u0232\u0234\u0005",
    "*\u0016\u0002\u0233\u0231\u0003\u0002\u0002\u0002\u0233\u0232\u0003",
    "\u0002\u0002\u0002\u0234\u0236\u0003\u0002\u0002\u0002\u0235\u022c\u0003",
    "\u0002\u0002\u0002\u0235\u0233\u0003\u0002\u0002\u0002\u0236\u023f\u0003",
    "\u0002\u0002\u0002\u0237\u0238\f\u0005\u0002\u0002\u0238\u0239\u0005",
    "(\u0015\u0002\u0239\u023a\u0005Z.\u0006\u023a\u023e\u0003\u0002\u0002",
    "\u0002\u023b\u023c\f\u0003\u0002\u0002\u023c\u023e\u0007$\u0002\u0002",
    "\u023d\u0237\u0003\u0002\u0002\u0002\u023d\u023b\u0003\u0002\u0002\u0002",
    "\u023e\u0241\u0003\u0002\u0002\u0002\u023f\u023d\u0003\u0002\u0002\u0002",
    "\u023f\u0240\u0003\u0002\u0002\u0002\u0240[\u0003\u0002\u0002\u0002",
    "\u0241\u023f\u0003\u0002\u0002\u0002\u0242\u0244\u00073\u0002\u0002",
    "\u0243\u0245\u0005^0\u0002\u0244\u0243\u0003\u0002\u0002\u0002\u0244",
    "\u0245\u0003\u0002\u0002\u0002\u0245]\u0003\u0002\u0002\u0002\u0246",
    "\u0247\u0005\f\u0007\u0002\u0247\u0248\u0007$\u0002\u0002\u0248\u024d",
    "\u0003\u0002\u0002\u0002\u0249\u024a\u0005\b\u0005\u0002\u024a\u024b",
    "\u0007$\u0002\u0002\u024b\u024d\u0003\u0002\u0002\u0002\u024c\u0246",
    "\u0003\u0002\u0002\u0002\u024c\u0249\u0003\u0002\u0002\u0002\u024d_",
    "\u0003\u0002\u0002\u0002\u024e\u0250\u00074\u0002\u0002\u024f\u0251",
    "\u0005b2\u0002\u0250\u024f\u0003\u0002\u0002\u0002\u0250\u0251\u0003",
    "\u0002\u0002\u0002\u0251a\u0003\u0002\u0002\u0002\u0252\u0253\u0005",
    "\b\u0005\u0002\u0253\u0254\u0007$\u0002\u0002\u0254c\u0003\u0002\u0002",
    "\u0002\u0255\u0257\u00075\u0002\u0002\u0256\u0258\u0005f4\u0002\u0257",
    "\u0256\u0003\u0002\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002\u0258",
    "e\u0003\u0002\u0002\u0002\u0259\u025a\u0005\b\u0005\u0002\u025a\u025b",
    "\u0007$\u0002\u0002\u025bg\u0003\u0002\u0002\u0002\u025c\u025e\u0007",
    "6\u0002\u0002\u025d\u025f\u0005j6\u0002\u025e\u025d\u0003\u0002\u0002",
    "\u0002\u025e\u025f\u0003\u0002\u0002\u0002\u025fi\u0003\u0002\u0002",
    "\u0002\u0260\u0261\u0005\f\u0007\u0002\u0261\u0262\u0007$\u0002\u0002",
    "\u0262k\u0003\u0002\u0002\u0002\u0263\u0265\u00077\u0002\u0002\u0264",
    "\u0266\u0005p9\u0002\u0265\u0264\u0003\u0002\u0002\u0002\u0265\u0266",
    "\u0003\u0002\u0002\u0002\u0266\u0268\u0003\u0002\u0002\u0002\u0267\u0269",
    "\u0005n8\u0002\u0268\u0267\u0003\u0002\u0002\u0002\u0268\u0269\u0003",
    "\u0002\u0002\u0002\u0269m\u0003\u0002\u0002\u0002\u026a\u026e\u0005",
    "\u001e\u0010\u0002\u026b\u026f\u0005\u0086D\u0002\u026c\u026f\u0005",
    "> \u0002\u026d\u026f\u0005N(\u0002\u026e\u026b\u0003\u0002\u0002\u0002",
    "\u026e\u026c\u0003\u0002\u0002\u0002\u026e\u026d\u0003\u0002\u0002\u0002",
    "\u026fo\u0003\u0002\u0002\u0002\u0270\u0271\u0005&\u0014\u0002\u0271",
    "\u0272\u0005r:\u0002\u0272q\u0003\u0002\u0002\u0002\u0273\u0274\b:\u0001",
    "\u0002\u0274\u0275\u0007\'\u0002\u0002\u0275\u0276\u0005r:\u0002\u0276",
    "\u0277\u0007(\u0002\u0002\u0277\u0282\u0003\u0002\u0002\u0002\u0278",
    "\u0280\u00052\u001a\u0002\u0279\u0280\u0005`1\u0002\u027a\u0280\u0005",
    "d3\u0002\u027b\u0280\u0005\\/\u0002\u027c\u0280\u0005*\u0016\u0002\u027d",
    "\u0280\u0005\u0080A\u0002\u027e\u0280\u0005\u001a\u000e\u0002\u027f",
    "\u0278\u0003\u0002\u0002\u0002\u027f\u0279\u0003\u0002\u0002\u0002\u027f",
    "\u027a\u0003\u0002\u0002\u0002\u027f\u027b\u0003\u0002\u0002\u0002\u027f",
    "\u027c\u0003\u0002\u0002\u0002\u027f\u027d\u0003\u0002\u0002\u0002\u027f",
    "\u027e\u0003\u0002\u0002\u0002\u0280\u0282\u0003\u0002\u0002\u0002\u0281",
    "\u0273\u0003\u0002\u0002\u0002\u0281\u027f\u0003\u0002\u0002\u0002\u0282",
    "\u028b\u0003\u0002\u0002\u0002\u0283\u0284\f\u0005\u0002\u0002\u0284",
    "\u0285\u0005(\u0015\u0002\u0285\u0286\u0005r:\u0006\u0286\u028a\u0003",
    "\u0002\u0002\u0002\u0287\u0288\f\u0003\u0002\u0002\u0288\u028a\u0007",
    "$\u0002\u0002\u0289\u0283\u0003\u0002\u0002\u0002\u0289\u0287\u0003",
    "\u0002\u0002\u0002\u028a\u028d\u0003\u0002\u0002\u0002\u028b\u0289\u0003",
    "\u0002\u0002\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028cs\u0003",
    "\u0002\u0002\u0002\u028d\u028b\u0003\u0002\u0002\u0002\u028e\u0290\u0007",
    "8\u0002\u0002\u028f\u0291\u0005x=\u0002\u0290\u028f\u0003\u0002\u0002",
    "\u0002\u0290\u0291\u0003\u0002\u0002\u0002\u0291\u0293\u0003\u0002\u0002",
    "\u0002\u0292\u0294\u0005v<\u0002\u0293\u0292\u0003\u0002\u0002\u0002",
    "\u0293\u0294\u0003\u0002\u0002\u0002\u0294u\u0003\u0002\u0002\u0002",
    "\u0295\u0299\u0005\u001e\u0010\u0002\u0296\u029a\u0005> \u0002\u0297",
    "\u029a\u0005N(\u0002\u0298\u029a\u0005N(\u0002\u0299\u0296\u0003\u0002",
    "\u0002\u0002\u0299\u0297\u0003\u0002\u0002\u0002\u0299\u0298\u0003\u0002",
    "\u0002\u0002\u029aw\u0003\u0002\u0002\u0002\u029b\u029c\u0005&\u0014",
    "\u0002\u029c\u029d\u0005z>\u0002\u029dy\u0003\u0002\u0002\u0002\u029e",
    "\u029f\b>\u0001\u0002\u029f\u02a0\u0007\'\u0002\u0002\u02a0\u02a1\u0005",
    "z>\u0002\u02a1\u02a2\u0007(\u0002\u0002\u02a2\u02a8\u0003\u0002\u0002",
    "\u0002\u02a3\u02a6\u0005\u001a\u000e\u0002\u02a4\u02a6\u0005|?\u0002",
    "\u02a5\u02a3\u0003\u0002\u0002\u0002\u02a5\u02a4\u0003\u0002\u0002\u0002",
    "\u02a6\u02a8\u0003\u0002\u0002\u0002\u02a7\u029e\u0003\u0002\u0002\u0002",
    "\u02a7\u02a5\u0003\u0002\u0002\u0002\u02a8\u02b1\u0003\u0002\u0002\u0002",
    "\u02a9\u02aa\f\u0005\u0002\u0002\u02aa\u02ab\u0005(\u0015\u0002\u02ab",
    "\u02ac\u0005z>\u0006\u02ac\u02b0\u0003\u0002\u0002\u0002\u02ad\u02ae",
    "\f\u0003\u0002\u0002\u02ae\u02b0\u0007$\u0002\u0002\u02af\u02a9\u0003",
    "\u0002\u0002\u0002\u02af\u02ad\u0003\u0002\u0002\u0002\u02b0\u02b3\u0003",
    "\u0002\u0002\u0002\u02b1\u02af\u0003\u0002\u0002\u0002\u02b1\u02b2\u0003",
    "\u0002\u0002\u0002\u02b2{\u0003\u0002\u0002\u0002\u02b3\u02b1\u0003",
    "\u0002\u0002\u0002\u02b4\u02b6\u00079\u0002\u0002\u02b5\u02b7\u0005",
    "~@\u0002\u02b6\u02b5\u0003\u0002\u0002\u0002\u02b6\u02b7\u0003\u0002",
    "\u0002\u0002\u02b7}\u0003\u0002\u0002\u0002\u02b8\u02b9\u0005\f\u0007",
    "\u0002\u02b9\u02ba\u0007$\u0002\u0002\u02ba\u007f\u0003\u0002\u0002",
    "\u0002\u02bb\u02bd\u0007:\u0002\u0002\u02bc\u02be\u0005\u0084C\u0002",
    "\u02bd\u02bc\u0003\u0002\u0002\u0002\u02bd\u02be\u0003\u0002\u0002\u0002",
    "\u02be\u02c0\u0003\u0002\u0002\u0002\u02bf\u02c1\u0005\u0082B\u0002",
    "\u02c0\u02bf\u0003\u0002\u0002\u0002\u02c0\u02c1\u0003\u0002\u0002\u0002",
    "\u02c1\u0081\u0003\u0002\u0002\u0002\u02c2\u02c3\u0005\u001e\u0010\u0002",
    "\u02c3\u02c4\u0005l7\u0002\u02c4\u0083\u0003\u0002\u0002\u0002\u02c5",
    "\u02c6\u0005\f\u0007\u0002\u02c6\u02c7\u0007$\u0002\u0002\u02c7\u0085",
    "\u0003\u0002\u0002\u0002\u02c8\u02ca\u0007;\u0002\u0002\u02c9\u02cb",
    "\u0005\u0088E\u0002\u02ca\u02c9\u0003\u0002\u0002\u0002\u02ca\u02cb",
    "\u0003\u0002\u0002\u0002\u02cb\u0087\u0003\u0002\u0002\u0002\u02cc\u02cd",
    "\u0005&\u0014\u0002\u02cd\u02ce\u0005\u008aF\u0002\u02ce\u0089\u0003",
    "\u0002\u0002\u0002\u02cf\u02d0\bF\u0001\u0002\u02d0\u02d1\u0007\'\u0002",
    "\u0002\u02d1\u02d2\u0005\u008aF\u0002\u02d2\u02d3\u0007(\u0002\u0002",
    "\u02d3\u02e4\u0003\u0002\u0002\u0002\u02d4\u02e2\u00052\u001a\u0002",
    "\u02d5\u02e2\u0005`1\u0002\u02d6\u02e2\u0005d3\u0002\u02d7\u02e2\u0005",
    ".\u0018\u0002\u02d8\u02e2\u00056\u001c\u0002\u02d9\u02e2\u0005:\u001e",
    "\u0002\u02da\u02e2\u0005> \u0002\u02db\u02e2\u0005F$\u0002\u02dc\u02e2",
    "\u0005N(\u0002\u02dd\u02e2\u0005l7\u0002\u02de\u02e2\u0005h5\u0002\u02df",
    "\u02e2\u0005\u001a\u000e\u0002\u02e0\u02e2\u0005\u008cG\u0002\u02e1",
    "\u02d4\u0003\u0002\u0002\u0002\u02e1\u02d5\u0003\u0002\u0002\u0002\u02e1",
    "\u02d6\u0003\u0002\u0002\u0002\u02e1\u02d7\u0003\u0002\u0002\u0002\u02e1",
    "\u02d8\u0003\u0002\u0002\u0002\u02e1\u02d9\u0003\u0002\u0002\u0002\u02e1",
    "\u02da\u0003\u0002\u0002\u0002\u02e1\u02db\u0003\u0002\u0002\u0002\u02e1",
    "\u02dc\u0003\u0002\u0002\u0002\u02e1\u02dd\u0003\u0002\u0002\u0002\u02e1",
    "\u02de\u0003\u0002\u0002\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e1",
    "\u02e0\u0003\u0002\u0002\u0002\u02e2\u02e4\u0003\u0002\u0002\u0002\u02e3",
    "\u02cf\u0003\u0002\u0002\u0002\u02e3\u02e1\u0003\u0002\u0002\u0002\u02e4",
    "\u02ed\u0003\u0002\u0002\u0002\u02e5\u02e6\f\u0005\u0002\u0002\u02e6",
    "\u02e7\u0005(\u0015\u0002\u02e7\u02e8\u0005\u008aF\u0006\u02e8\u02ec",
    "\u0003\u0002\u0002\u0002\u02e9\u02ea\f\u0003\u0002\u0002\u02ea\u02ec",
    "\u0007$\u0002\u0002\u02eb\u02e5\u0003\u0002\u0002\u0002\u02eb\u02e9",
    "\u0003\u0002\u0002\u0002\u02ec\u02ef\u0003\u0002\u0002\u0002\u02ed\u02eb",
    "\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee\u008b",
    "\u0003\u0002\u0002\u0002\u02ef\u02ed\u0003\u0002\u0002\u0002\u02f0\u02f2",
    "\u0007<\u0002\u0002\u02f1\u02f3\u0005\u0090I\u0002\u02f2\u02f1\u0003",
    "\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002\u0002\u02f3\u02f5\u0003",
    "\u0002\u0002\u0002\u02f4\u02f6\u0005\u008eH\u0002\u02f5\u02f4\u0003",
    "\u0002\u0002\u0002\u02f5\u02f6\u0003\u0002\u0002\u0002\u02f6\u008d\u0003",
    "\u0002\u0002\u0002\u02f7\u02f8\u0005\u001e\u0010\u0002\u02f8\u02f9\u0005",
    "\u0086D\u0002\u02f9\u008f\u0003\u0002\u0002\u0002\u02fa\u02fb\u0005",
    "&\u0014\u0002\u02fb\u02fc\u0005\u0092J\u0002\u02fc\u0091\u0003\u0002",
    "\u0002\u0002\u02fd\u02fe\bJ\u0001\u0002\u02fe\u02ff\u0007\'\u0002\u0002",
    "\u02ff\u0300\u0005\u0092J\u0002\u0300\u0301\u0007(\u0002\u0002\u0301",
    "\u0313\u0003\u0002\u0002\u0002\u0302\u0311\u00052\u001a\u0002\u0303",
    "\u0311\u0005`1\u0002\u0304\u0311\u0005d3\u0002\u0305\u0311\u0005.\u0018",
    "\u0002\u0306\u0311\u00056\u001c\u0002\u0307\u0311\u0005:\u001e\u0002",
    "\u0308\u0311\u0005> \u0002\u0309\u0311\u0005\u008cG\u0002\u030a\u0311",
    "\u0003\u0002\u0002\u0002\u030b\u0311\u0005F$\u0002\u030c\u0311\u0005",
    "N(\u0002\u030d\u0311\u0005l7\u0002\u030e\u0311\u0005h5\u0002\u030f\u0311",
    "\u0005\u001a\u000e\u0002\u0310\u0302\u0003\u0002\u0002\u0002\u0310\u0303",
    "\u0003\u0002\u0002\u0002\u0310\u0304\u0003\u0002\u0002\u0002\u0310\u0305",
    "\u0003\u0002\u0002\u0002\u0310\u0306\u0003\u0002\u0002\u0002\u0310\u0307",
    "\u0003\u0002\u0002\u0002\u0310\u0308\u0003\u0002\u0002\u0002\u0310\u0309",
    "\u0003\u0002\u0002\u0002\u0310\u030a\u0003\u0002\u0002\u0002\u0310\u030b",
    "\u0003\u0002\u0002\u0002\u0310\u030c\u0003\u0002\u0002\u0002\u0310\u030d",
    "\u0003\u0002\u0002\u0002\u0310\u030e\u0003\u0002\u0002\u0002\u0310\u030f",
    "\u0003\u0002\u0002\u0002\u0311\u0313\u0003\u0002\u0002\u0002\u0312\u02fd",
    "\u0003\u0002\u0002\u0002\u0312\u0310\u0003\u0002\u0002\u0002\u0313\u031c",
    "\u0003\u0002\u0002\u0002\u0314\u0315\f\u0005\u0002\u0002\u0315\u0316",
    "\u0005(\u0015\u0002\u0316\u0317\u0005\u0092J\u0006\u0317\u031b\u0003",
    "\u0002\u0002\u0002\u0318\u0319\f\u0003\u0002\u0002\u0319\u031b\u0007",
    "$\u0002\u0002\u031a\u0314\u0003\u0002\u0002\u0002\u031a\u0318\u0003",
    "\u0002\u0002\u0002\u031b\u031e\u0003\u0002\u0002\u0002\u031c\u031a\u0003",
    "\u0002\u0002\u0002\u031c\u031d\u0003\u0002\u0002\u0002\u031d\u0093\u0003",
    "\u0002\u0002\u0002\u031e\u031c\u0003\u0002\u0002\u0002_\u0097\u009b",
    "\u009e\u00a3\u00af\u00b2\u00b7\u00df\u00e8\u00ea\u00f3\u00f9\u00ff\u0105",
    "\u010a\u0111\u0118\u011f\u0122\u0128\u012d\u012f\u0134\u0139\u0146\u0148",
    "\u0150\u0152\u015c\u016e\u0172\u0179\u0181\u0185\u018d\u019a\u01a7\u01ab",
    "\u01ae\u01c5\u01c7\u01cf\u01d1\u01d6\u01d9\u01ec\u01ee\u01f6\u01f8\u01fd",
    "\u0200\u0216\u0218\u0220\u0222\u0227\u0233\u0235\u023d\u023f\u0244\u024c",
    "\u0250\u0257\u025e\u0265\u0268\u026e\u027f\u0281\u0289\u028b\u0290\u0293",
    "\u0299\u02a5\u02a7\u02af\u02b1\u02b6\u02bd\u02c0\u02ca\u02e1\u02e3\u02eb",
    "\u02ed\u02f2\u02f5\u0310\u0312\u031a\u031c"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'\"'", "'||'", "'&&'", "'!'", "'...'", "'!...'", 
                     "'.'", "'='", "'>'", "'<'", "','", "'''", "'&'", "'No Constructor'", 
                     "'No Function'", "'Empty Body'", "'No Parameter'", 
                     "'Initialization'", "'Calling Constructor: '", "'Calling Function: '", 
                     "'Modifying Field: '", "'Calling a Function With Argument: '", 
                     "'Initialized by Calling Function: '", "'Initialized by Calling a Function With Argument: '", 
                     "'Initialized with: '", "'Caller: '", "'Assigned Value: '", 
                     "'must '", "'of '", "'and '", "'or '", "'have '", "'with '", 
                     null, null, null, "'('", "')'", "'name '", "'annotation '", 
                     "'extension '", "'Superclass'", "'implementation '", 
                     "'Interface '", "'function '", "'abstract function '", 
                     "'constructor '", "'parameter '", "'type '", "'specifier '", 
                     "'visibility '", "'return value '", "'declaration statement '", 
                     "'expression statement '", "'value '", "'initial value '", 
                     "'class '", "'subclass '" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, "SPACE", 
                      "Alphabet", "NL", "LPAREN", "RPAREN", "NAME", "ANNOTATION", 
                      "EXTENSION", "SUPERCLASS", "IMPLEMENTATION", "INTERFACE", 
                      "FUNCTION", "AbstractFunctions", "CONSTRUCTOR", "PARAMETER", 
                      "TYPES", "SPECIFIER", "VISIBILITY", "ReturnValue", 
                      "DeclarationStatement", "ExpressionStatement", "VALUE", 
                      "InitialValue", "CLASSES", "SUBCLASSES" ];

var ruleNames =  [ "inputSentence", "partialClause", "mustClause", "words", 
                   "word", "combinatorialWords", "symbols", "end", "emptyLine", 
                   "identifier", "identifiers", "commentPrefix", "comments", 
                   "must", "of", "and", "or", "have", "withWord", "binary", 
                   "names", "nameCondition", "classNames", "classNameCondition", 
                   "annotations", "annotationCondition", "extensions", "extensionCondition", 
                   "implementations", "implementationCondition", "functions", 
                   "functionOf", "functionCondition", "functionExpression", 
                   "abstractFunctions", "abstractFunctionOf", "abstractFunctionCondition", 
                   "abstractFunctionExpression", "constructors", "constructorOf", 
                   "constructorCondition", "constructorExpression", "parameters", 
                   "parameterCondition", "parameterExpression", "types", 
                   "typeCondition", "specifiers", "specifierCondition", 
                   "visibilities", "visibilityCondition", "returnValues", 
                   "returnValueCondition", "declarationStatements", "declarationStatementOf", 
                   "declarationStatementCondition", "declarationStatementExpression", 
                   "expressionStatements", "expressionStatementOf", "expressionStatementCondition", 
                   "expressionStatementExpression", "value", "valueCondition", 
                   "initialValues", "initialValueOf", "initialValueCondition", 
                   "classes", "classCondition", "classExpression", "subclasses", 
                   "subclassOf", "subclassCondition", "subclassExpression" ];

function rulePadGrammarParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

rulePadGrammarParser.prototype = Object.create(antlr4.Parser.prototype);
rulePadGrammarParser.prototype.constructor = rulePadGrammarParser;

Object.defineProperty(rulePadGrammarParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

rulePadGrammarParser.EOF = antlr4.Token.EOF;
rulePadGrammarParser.T__0 = 1;
rulePadGrammarParser.T__1 = 2;
rulePadGrammarParser.T__2 = 3;
rulePadGrammarParser.T__3 = 4;
rulePadGrammarParser.T__4 = 5;
rulePadGrammarParser.T__5 = 6;
rulePadGrammarParser.T__6 = 7;
rulePadGrammarParser.T__7 = 8;
rulePadGrammarParser.T__8 = 9;
rulePadGrammarParser.T__9 = 10;
rulePadGrammarParser.T__10 = 11;
rulePadGrammarParser.T__11 = 12;
rulePadGrammarParser.T__12 = 13;
rulePadGrammarParser.T__13 = 14;
rulePadGrammarParser.T__14 = 15;
rulePadGrammarParser.T__15 = 16;
rulePadGrammarParser.T__16 = 17;
rulePadGrammarParser.T__17 = 18;
rulePadGrammarParser.T__18 = 19;
rulePadGrammarParser.T__19 = 20;
rulePadGrammarParser.T__20 = 21;
rulePadGrammarParser.T__21 = 22;
rulePadGrammarParser.T__22 = 23;
rulePadGrammarParser.T__23 = 24;
rulePadGrammarParser.T__24 = 25;
rulePadGrammarParser.T__25 = 26;
rulePadGrammarParser.T__26 = 27;
rulePadGrammarParser.T__27 = 28;
rulePadGrammarParser.T__28 = 29;
rulePadGrammarParser.T__29 = 30;
rulePadGrammarParser.T__30 = 31;
rulePadGrammarParser.T__31 = 32;
rulePadGrammarParser.T__32 = 33;
rulePadGrammarParser.SPACE = 34;
rulePadGrammarParser.Alphabet = 35;
rulePadGrammarParser.NL = 36;
rulePadGrammarParser.LPAREN = 37;
rulePadGrammarParser.RPAREN = 38;
rulePadGrammarParser.NAME = 39;
rulePadGrammarParser.ANNOTATION = 40;
rulePadGrammarParser.EXTENSION = 41;
rulePadGrammarParser.SUPERCLASS = 42;
rulePadGrammarParser.IMPLEMENTATION = 43;
rulePadGrammarParser.INTERFACE = 44;
rulePadGrammarParser.FUNCTION = 45;
rulePadGrammarParser.AbstractFunctions = 46;
rulePadGrammarParser.CONSTRUCTOR = 47;
rulePadGrammarParser.PARAMETER = 48;
rulePadGrammarParser.TYPES = 49;
rulePadGrammarParser.SPECIFIER = 50;
rulePadGrammarParser.VISIBILITY = 51;
rulePadGrammarParser.ReturnValue = 52;
rulePadGrammarParser.DeclarationStatement = 53;
rulePadGrammarParser.ExpressionStatement = 54;
rulePadGrammarParser.VALUE = 55;
rulePadGrammarParser.InitialValue = 56;
rulePadGrammarParser.CLASSES = 57;
rulePadGrammarParser.SUBCLASSES = 58;

rulePadGrammarParser.RULE_inputSentence = 0;
rulePadGrammarParser.RULE_partialClause = 1;
rulePadGrammarParser.RULE_mustClause = 2;
rulePadGrammarParser.RULE_words = 3;
rulePadGrammarParser.RULE_word = 4;
rulePadGrammarParser.RULE_combinatorialWords = 5;
rulePadGrammarParser.RULE_symbols = 6;
rulePadGrammarParser.RULE_end = 7;
rulePadGrammarParser.RULE_emptyLine = 8;
rulePadGrammarParser.RULE_identifier = 9;
rulePadGrammarParser.RULE_identifiers = 10;
rulePadGrammarParser.RULE_commentPrefix = 11;
rulePadGrammarParser.RULE_comments = 12;
rulePadGrammarParser.RULE_must = 13;
rulePadGrammarParser.RULE_of = 14;
rulePadGrammarParser.RULE_and = 15;
rulePadGrammarParser.RULE_or = 16;
rulePadGrammarParser.RULE_have = 17;
rulePadGrammarParser.RULE_withWord = 18;
rulePadGrammarParser.RULE_binary = 19;
rulePadGrammarParser.RULE_names = 20;
rulePadGrammarParser.RULE_nameCondition = 21;
rulePadGrammarParser.RULE_classNames = 22;
rulePadGrammarParser.RULE_classNameCondition = 23;
rulePadGrammarParser.RULE_annotations = 24;
rulePadGrammarParser.RULE_annotationCondition = 25;
rulePadGrammarParser.RULE_extensions = 26;
rulePadGrammarParser.RULE_extensionCondition = 27;
rulePadGrammarParser.RULE_implementations = 28;
rulePadGrammarParser.RULE_implementationCondition = 29;
rulePadGrammarParser.RULE_functions = 30;
rulePadGrammarParser.RULE_functionOf = 31;
rulePadGrammarParser.RULE_functionCondition = 32;
rulePadGrammarParser.RULE_functionExpression = 33;
rulePadGrammarParser.RULE_abstractFunctions = 34;
rulePadGrammarParser.RULE_abstractFunctionOf = 35;
rulePadGrammarParser.RULE_abstractFunctionCondition = 36;
rulePadGrammarParser.RULE_abstractFunctionExpression = 37;
rulePadGrammarParser.RULE_constructors = 38;
rulePadGrammarParser.RULE_constructorOf = 39;
rulePadGrammarParser.RULE_constructorCondition = 40;
rulePadGrammarParser.RULE_constructorExpression = 41;
rulePadGrammarParser.RULE_parameters = 42;
rulePadGrammarParser.RULE_parameterCondition = 43;
rulePadGrammarParser.RULE_parameterExpression = 44;
rulePadGrammarParser.RULE_types = 45;
rulePadGrammarParser.RULE_typeCondition = 46;
rulePadGrammarParser.RULE_specifiers = 47;
rulePadGrammarParser.RULE_specifierCondition = 48;
rulePadGrammarParser.RULE_visibilities = 49;
rulePadGrammarParser.RULE_visibilityCondition = 50;
rulePadGrammarParser.RULE_returnValues = 51;
rulePadGrammarParser.RULE_returnValueCondition = 52;
rulePadGrammarParser.RULE_declarationStatements = 53;
rulePadGrammarParser.RULE_declarationStatementOf = 54;
rulePadGrammarParser.RULE_declarationStatementCondition = 55;
rulePadGrammarParser.RULE_declarationStatementExpression = 56;
rulePadGrammarParser.RULE_expressionStatements = 57;
rulePadGrammarParser.RULE_expressionStatementOf = 58;
rulePadGrammarParser.RULE_expressionStatementCondition = 59;
rulePadGrammarParser.RULE_expressionStatementExpression = 60;
rulePadGrammarParser.RULE_value = 61;
rulePadGrammarParser.RULE_valueCondition = 62;
rulePadGrammarParser.RULE_initialValues = 63;
rulePadGrammarParser.RULE_initialValueOf = 64;
rulePadGrammarParser.RULE_initialValueCondition = 65;
rulePadGrammarParser.RULE_classes = 66;
rulePadGrammarParser.RULE_classCondition = 67;
rulePadGrammarParser.RULE_classExpression = 68;
rulePadGrammarParser.RULE_subclasses = 69;
rulePadGrammarParser.RULE_subclassOf = 70;
rulePadGrammarParser.RULE_subclassCondition = 71;
rulePadGrammarParser.RULE_subclassExpression = 72;

function InputSentenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_inputSentence;
    return this;
}

InputSentenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputSentenceContext.prototype.constructor = InputSentenceContext;

InputSentenceContext.prototype.EOF = function() {
    return this.getToken(rulePadGrammarParser.EOF, 0);
};

InputSentenceContext.prototype.mustClause = function() {
    return this.getTypedRuleContext(MustClauseContext,0);
};

InputSentenceContext.prototype.end = function() {
    return this.getTypedRuleContext(EndContext,0);
};

InputSentenceContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(rulePadGrammarParser.NL);
    } else {
        return this.getToken(rulePadGrammarParser.NL, i);
    }
};


InputSentenceContext.prototype.emptyLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EmptyLineContext);
    } else {
        return this.getTypedRuleContext(EmptyLineContext,i);
    }
};

InputSentenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterInputSentence(this);
	}
};

InputSentenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitInputSentence(this);
	}
};




rulePadGrammarParser.InputSentenceContext = InputSentenceContext;

rulePadGrammarParser.prototype.inputSentence = function() {

    var localctx = new InputSentenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, rulePadGrammarParser.RULE_inputSentence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 153;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.EOF:
        case rulePadGrammarParser.T__6:
        case rulePadGrammarParser.NL:
            this.state = 149;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 146;
                    this.emptyLine(); 
                }
                this.state = 151;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
            }

            break;
        case rulePadGrammarParser.FUNCTION:
        case rulePadGrammarParser.AbstractFunctions:
        case rulePadGrammarParser.CONSTRUCTOR:
        case rulePadGrammarParser.PARAMETER:
        case rulePadGrammarParser.DeclarationStatement:
        case rulePadGrammarParser.CLASSES:
        case rulePadGrammarParser.SUBCLASSES:
            this.state = 152;
            this.mustClause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 156;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===rulePadGrammarParser.T__6) {
            this.state = 155;
            this.end();
        }

        this.state = 161;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===rulePadGrammarParser.NL) {
            this.state = 158;
            this.match(rulePadGrammarParser.NL);
            this.state = 163;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 164;
        this.match(rulePadGrammarParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartialClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_partialClause;
    return this;
}

PartialClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartialClauseContext.prototype.constructor = PartialClauseContext;

PartialClauseContext.prototype.EOF = function() {
    return this.getToken(rulePadGrammarParser.EOF, 0);
};

PartialClauseContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

PartialClauseContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

PartialClauseContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

PartialClauseContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

PartialClauseContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

PartialClauseContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

PartialClauseContext.prototype.subclasses = function() {
    return this.getTypedRuleContext(SubclassesContext,0);
};

PartialClauseContext.prototype.end = function() {
    return this.getTypedRuleContext(EndContext,0);
};

PartialClauseContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(rulePadGrammarParser.NL);
    } else {
        return this.getToken(rulePadGrammarParser.NL, i);
    }
};


PartialClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterPartialClause(this);
	}
};

PartialClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitPartialClause(this);
	}
};




rulePadGrammarParser.PartialClauseContext = PartialClauseContext;

rulePadGrammarParser.prototype.partialClause = function() {

    var localctx = new PartialClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, rulePadGrammarParser.RULE_partialClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 173;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.FUNCTION:
            this.state = 166;
            this.functions();
            break;
        case rulePadGrammarParser.AbstractFunctions:
            this.state = 167;
            this.abstractFunctions();
            break;
        case rulePadGrammarParser.CONSTRUCTOR:
            this.state = 168;
            this.constructors();
            break;
        case rulePadGrammarParser.CLASSES:
            this.state = 169;
            this.classes();
            break;
        case rulePadGrammarParser.PARAMETER:
            this.state = 170;
            this.parameters();
            break;
        case rulePadGrammarParser.DeclarationStatement:
            this.state = 171;
            this.declarationStatements();
            break;
        case rulePadGrammarParser.SUBCLASSES:
            this.state = 172;
            this.subclasses();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 176;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===rulePadGrammarParser.T__6) {
            this.state = 175;
            this.end();
        }

        this.state = 181;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===rulePadGrammarParser.NL) {
            this.state = 178;
            this.match(rulePadGrammarParser.NL);
            this.state = 183;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 184;
        this.match(rulePadGrammarParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MustClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_mustClause;
    return this;
}

MustClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MustClauseContext.prototype.constructor = MustClauseContext;

MustClauseContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

MustClauseContext.prototype.must = function() {
    return this.getTypedRuleContext(MustContext,0);
};

MustClauseContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

MustClauseContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};

MustClauseContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

MustClauseContext.prototype.abstractFunctionExpression = function() {
    return this.getTypedRuleContext(AbstractFunctionExpressionContext,0);
};

MustClauseContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

MustClauseContext.prototype.constructorExpression = function() {
    return this.getTypedRuleContext(ConstructorExpressionContext,0);
};

MustClauseContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

MustClauseContext.prototype.classExpression = function() {
    return this.getTypedRuleContext(ClassExpressionContext,0);
};

MustClauseContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

MustClauseContext.prototype.parameterExpression = function() {
    return this.getTypedRuleContext(ParameterExpressionContext,0);
};

MustClauseContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

MustClauseContext.prototype.declarationStatementExpression = function() {
    return this.getTypedRuleContext(DeclarationStatementExpressionContext,0);
};

MustClauseContext.prototype.subclasses = function() {
    return this.getTypedRuleContext(SubclassesContext,0);
};

MustClauseContext.prototype.subclassExpression = function() {
    return this.getTypedRuleContext(SubclassExpressionContext,0);
};

MustClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterMustClause(this);
	}
};

MustClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitMustClause(this);
	}
};




rulePadGrammarParser.MustClauseContext = MustClauseContext;

rulePadGrammarParser.prototype.mustClause = function() {

    var localctx = new MustClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, rulePadGrammarParser.RULE_mustClause);
    try {
        this.state = 221;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.FUNCTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 186;
            this.functions();
            this.state = 187;
            this.must();
            this.state = 188;
            this.have();
            this.state = 189;
            this.functionExpression(0);
            break;
        case rulePadGrammarParser.AbstractFunctions:
            this.enterOuterAlt(localctx, 2);
            this.state = 191;
            this.abstractFunctions();
            this.state = 192;
            this.must();
            this.state = 193;
            this.have();
            this.state = 194;
            this.abstractFunctionExpression(0);
            break;
        case rulePadGrammarParser.CONSTRUCTOR:
            this.enterOuterAlt(localctx, 3);
            this.state = 196;
            this.constructors();
            this.state = 197;
            this.must();
            this.state = 198;
            this.have();
            this.state = 199;
            this.constructorExpression(0);
            break;
        case rulePadGrammarParser.CLASSES:
            this.enterOuterAlt(localctx, 4);
            this.state = 201;
            this.classes();
            this.state = 202;
            this.must();
            this.state = 203;
            this.have();
            this.state = 204;
            this.classExpression(0);
            break;
        case rulePadGrammarParser.PARAMETER:
            this.enterOuterAlt(localctx, 5);
            this.state = 206;
            this.parameters();
            this.state = 207;
            this.must();
            this.state = 208;
            this.have();
            this.state = 209;
            this.parameterExpression(0);
            break;
        case rulePadGrammarParser.DeclarationStatement:
            this.enterOuterAlt(localctx, 6);
            this.state = 211;
            this.declarationStatements();
            this.state = 212;
            this.must();
            this.state = 213;
            this.have();
            this.state = 214;
            this.declarationStatementExpression(0);
            break;
        case rulePadGrammarParser.SUBCLASSES:
            this.enterOuterAlt(localctx, 7);
            this.state = 216;
            this.subclasses();
            this.state = 217;
            this.must();
            this.state = 218;
            this.have();
            this.state = 219;
            this.subclassExpression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WordsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_words;
    return this;
}

WordsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WordsContext.prototype.constructor = WordsContext;

WordsContext.prototype.word = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WordContext);
    } else {
        return this.getTypedRuleContext(WordContext,i);
    }
};

WordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterWords(this);
	}
};

WordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitWords(this);
	}
};




rulePadGrammarParser.WordsContext = WordsContext;

rulePadGrammarParser.prototype.words = function() {

    var localctx = new WordsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, rulePadGrammarParser.RULE_words);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 223;
        this.match(rulePadGrammarParser.T__0);
        this.state = 232;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 230;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 224;
                    this.word();
                    this.state = 225;
                    this.match(rulePadGrammarParser.T__1);
                    break;

                case 2:
                    this.state = 227;
                    this.word();
                    this.state = 228;
                    this.match(rulePadGrammarParser.T__2);
                    break;

                } 
            }
            this.state = 234;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
        }

        this.state = 235;
        this.word();
        this.state = 236;
        this.match(rulePadGrammarParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_word;
    return this;
}

WordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WordContext.prototype.constructor = WordContext;

WordContext.prototype.Alphabet = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(rulePadGrammarParser.Alphabet);
    } else {
        return this.getToken(rulePadGrammarParser.Alphabet, i);
    }
};


WordContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterWord(this);
	}
};

WordContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitWord(this);
	}
};




rulePadGrammarParser.WordContext = WordContext;

rulePadGrammarParser.prototype.word = function() {

    var localctx = new WordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, rulePadGrammarParser.RULE_word);
    var _la = 0; // Token type
    try {
        this.state = 288;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 239; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 238;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 241; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 243;
            this.match(rulePadGrammarParser.T__3);
            this.state = 245; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 244;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 247; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 249;
            this.match(rulePadGrammarParser.T__4);
            this.state = 251; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 250;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 253; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 255;
            this.match(rulePadGrammarParser.T__5);
            this.state = 257; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 256;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 259; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 262; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 261;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 264; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            this.state = 266;
            this.match(rulePadGrammarParser.T__4);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 267;
            this.match(rulePadGrammarParser.T__3);
            this.state = 269; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 268;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 271; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            this.state = 273;
            this.match(rulePadGrammarParser.T__4);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 274;
            this.match(rulePadGrammarParser.T__4);
            this.state = 276; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 275;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 278; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            this.state = 280;
            this.match(rulePadGrammarParser.T__4);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 281;
            this.match(rulePadGrammarParser.T__5);
            this.state = 283; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 282;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 285; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            this.state = 287;
            this.match(rulePadGrammarParser.T__4);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CombinatorialWordsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_combinatorialWords;
    return this;
}

CombinatorialWordsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CombinatorialWordsContext.prototype.constructor = CombinatorialWordsContext;

CombinatorialWordsContext.prototype.Alphabet = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(rulePadGrammarParser.Alphabet);
    } else {
        return this.getToken(rulePadGrammarParser.Alphabet, i);
    }
};


CombinatorialWordsContext.prototype.symbols = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolsContext);
    } else {
        return this.getTypedRuleContext(SymbolsContext,i);
    }
};

CombinatorialWordsContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(rulePadGrammarParser.SPACE);
    } else {
        return this.getToken(rulePadGrammarParser.SPACE, i);
    }
};


CombinatorialWordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterCombinatorialWords(this);
	}
};

CombinatorialWordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitCombinatorialWords(this);
	}
};




rulePadGrammarParser.CombinatorialWordsContext = CombinatorialWordsContext;

rulePadGrammarParser.prototype.combinatorialWords = function() {

    var localctx = new CombinatorialWordsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, rulePadGrammarParser.RULE_combinatorialWords);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 290;
        this.match(rulePadGrammarParser.T__0);
        this.state = 309; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 294;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===rulePadGrammarParser.Alphabet) {
                this.state = 291;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 296;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 299; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 299;
            		this._errHandler.sync(this);
            		switch(this._input.LA(1)) {
            		case rulePadGrammarParser.T__6:
            		case rulePadGrammarParser.T__7:
            		case rulePadGrammarParser.T__8:
            		case rulePadGrammarParser.T__9:
            		case rulePadGrammarParser.T__10:
            		case rulePadGrammarParser.T__11:
            		case rulePadGrammarParser.T__12:
            		case rulePadGrammarParser.LPAREN:
            		case rulePadGrammarParser.RPAREN:
            		    this.state = 297;
            		    this.symbols();
            		    break;
            		case rulePadGrammarParser.SPACE:
            		    this.state = 298;
            		    this.match(rulePadGrammarParser.SPACE);
            		    break;
            		default:
            		    throw new antlr4.error.NoViableAltException(this);
            		}
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 301; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,21, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 306;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 303;
                    this.match(rulePadGrammarParser.Alphabet); 
                }
                this.state = 308;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
            }

            this.state = 311; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (rulePadGrammarParser.T__6 - 7)) | (1 << (rulePadGrammarParser.T__7 - 7)) | (1 << (rulePadGrammarParser.T__8 - 7)) | (1 << (rulePadGrammarParser.T__9 - 7)) | (1 << (rulePadGrammarParser.T__10 - 7)) | (1 << (rulePadGrammarParser.T__11 - 7)) | (1 << (rulePadGrammarParser.T__12 - 7)) | (1 << (rulePadGrammarParser.SPACE - 7)) | (1 << (rulePadGrammarParser.Alphabet - 7)) | (1 << (rulePadGrammarParser.LPAREN - 7)) | (1 << (rulePadGrammarParser.RPAREN - 7)))) !== 0));
        this.state = 313;
        this.match(rulePadGrammarParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SymbolsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_symbols;
    return this;
}

SymbolsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolsContext.prototype.constructor = SymbolsContext;


SymbolsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterSymbols(this);
	}
};

SymbolsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitSymbols(this);
	}
};




rulePadGrammarParser.SymbolsContext = SymbolsContext;

rulePadGrammarParser.prototype.symbols = function() {

    var localctx = new SymbolsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, rulePadGrammarParser.RULE_symbols);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 315;
        _la = this._input.LA(1);
        if(!(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (rulePadGrammarParser.T__6 - 7)) | (1 << (rulePadGrammarParser.T__7 - 7)) | (1 << (rulePadGrammarParser.T__8 - 7)) | (1 << (rulePadGrammarParser.T__9 - 7)) | (1 << (rulePadGrammarParser.T__10 - 7)) | (1 << (rulePadGrammarParser.T__11 - 7)) | (1 << (rulePadGrammarParser.T__12 - 7)) | (1 << (rulePadGrammarParser.LPAREN - 7)) | (1 << (rulePadGrammarParser.RPAREN - 7)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_end;
    return this;
}

EndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndContext.prototype.constructor = EndContext;


EndContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterEnd(this);
	}
};

EndContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitEnd(this);
	}
};




rulePadGrammarParser.EndContext = EndContext;

rulePadGrammarParser.prototype.end = function() {

    var localctx = new EndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, rulePadGrammarParser.RULE_end);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 317;
        this.match(rulePadGrammarParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptyLineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_emptyLine;
    return this;
}

EmptyLineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyLineContext.prototype.constructor = EmptyLineContext;

EmptyLineContext.prototype.NL = function() {
    return this.getToken(rulePadGrammarParser.NL, 0);
};

EmptyLineContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterEmptyLine(this);
	}
};

EmptyLineContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitEmptyLine(this);
	}
};




rulePadGrammarParser.EmptyLineContext = EmptyLineContext;

rulePadGrammarParser.prototype.emptyLine = function() {

    var localctx = new EmptyLineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, rulePadGrammarParser.RULE_emptyLine);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 319;
        this.match(rulePadGrammarParser.NL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.Alphabet = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(rulePadGrammarParser.Alphabet);
    } else {
        return this.getToken(rulePadGrammarParser.Alphabet, i);
    }
};


IdentifierContext.prototype.symbols = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolsContext);
    } else {
        return this.getTypedRuleContext(SymbolsContext,i);
    }
};

IdentifierContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(rulePadGrammarParser.SPACE);
    } else {
        return this.getToken(rulePadGrammarParser.SPACE, i);
    }
};


IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitIdentifier(this);
	}
};




rulePadGrammarParser.IdentifierContext = IdentifierContext;

rulePadGrammarParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, rulePadGrammarParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 324; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 324;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.Alphabet:
                this.state = 321;
                this.match(rulePadGrammarParser.Alphabet);
                break;
            case rulePadGrammarParser.T__6:
            case rulePadGrammarParser.T__7:
            case rulePadGrammarParser.T__8:
            case rulePadGrammarParser.T__9:
            case rulePadGrammarParser.T__10:
            case rulePadGrammarParser.T__11:
            case rulePadGrammarParser.T__12:
            case rulePadGrammarParser.LPAREN:
            case rulePadGrammarParser.RPAREN:
                this.state = 322;
                this.symbols();
                break;
            case rulePadGrammarParser.SPACE:
                this.state = 323;
                this.match(rulePadGrammarParser.SPACE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 326; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (rulePadGrammarParser.T__6 - 7)) | (1 << (rulePadGrammarParser.T__7 - 7)) | (1 << (rulePadGrammarParser.T__8 - 7)) | (1 << (rulePadGrammarParser.T__9 - 7)) | (1 << (rulePadGrammarParser.T__10 - 7)) | (1 << (rulePadGrammarParser.T__11 - 7)) | (1 << (rulePadGrammarParser.T__12 - 7)) | (1 << (rulePadGrammarParser.SPACE - 7)) | (1 << (rulePadGrammarParser.Alphabet - 7)) | (1 << (rulePadGrammarParser.LPAREN - 7)) | (1 << (rulePadGrammarParser.RPAREN - 7)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_identifiers;
    return this;
}

IdentifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifiersContext.prototype.constructor = IdentifiersContext;

IdentifiersContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

IdentifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterIdentifiers(this);
	}
};

IdentifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitIdentifiers(this);
	}
};




rulePadGrammarParser.IdentifiersContext = IdentifiersContext;

rulePadGrammarParser.prototype.identifiers = function() {

    var localctx = new IdentifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, rulePadGrammarParser.RULE_identifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 336;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,27,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 334;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 328;
                    this.identifier();
                    this.state = 329;
                    this.match(rulePadGrammarParser.T__1);
                    break;

                case 2:
                    this.state = 331;
                    this.identifier();
                    this.state = 332;
                    this.match(rulePadGrammarParser.T__2);
                    break;

                } 
            }
            this.state = 338;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,27,this._ctx);
        }

        this.state = 339;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommentPrefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_commentPrefix;
    return this;
}

CommentPrefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommentPrefixContext.prototype.constructor = CommentPrefixContext;


CommentPrefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterCommentPrefix(this);
	}
};

CommentPrefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitCommentPrefix(this);
	}
};




rulePadGrammarParser.CommentPrefixContext = CommentPrefixContext;

rulePadGrammarParser.prototype.commentPrefix = function() {

    var localctx = new CommentPrefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, rulePadGrammarParser.RULE_commentPrefix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 341;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << rulePadGrammarParser.T__13) | (1 << rulePadGrammarParser.T__14) | (1 << rulePadGrammarParser.T__15) | (1 << rulePadGrammarParser.T__16) | (1 << rulePadGrammarParser.T__17) | (1 << rulePadGrammarParser.T__18) | (1 << rulePadGrammarParser.T__19) | (1 << rulePadGrammarParser.T__20) | (1 << rulePadGrammarParser.T__21) | (1 << rulePadGrammarParser.T__22) | (1 << rulePadGrammarParser.T__23) | (1 << rulePadGrammarParser.T__24) | (1 << rulePadGrammarParser.T__25) | (1 << rulePadGrammarParser.T__26))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_comments;
    return this;
}

CommentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommentsContext.prototype.constructor = CommentsContext;

CommentsContext.prototype.commentPrefix = function() {
    return this.getTypedRuleContext(CommentPrefixContext,0);
};

CommentsContext.prototype.identifiers = function() {
    return this.getTypedRuleContext(IdentifiersContext,0);
};

CommentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterComments(this);
	}
};

CommentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitComments(this);
	}
};




rulePadGrammarParser.CommentsContext = CommentsContext;

rulePadGrammarParser.prototype.comments = function() {

    var localctx = new CommentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, rulePadGrammarParser.RULE_comments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 343;
        this.match(rulePadGrammarParser.T__0);
        this.state = 344;
        this.commentPrefix();
        this.state = 346;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (rulePadGrammarParser.T__6 - 7)) | (1 << (rulePadGrammarParser.T__7 - 7)) | (1 << (rulePadGrammarParser.T__8 - 7)) | (1 << (rulePadGrammarParser.T__9 - 7)) | (1 << (rulePadGrammarParser.T__10 - 7)) | (1 << (rulePadGrammarParser.T__11 - 7)) | (1 << (rulePadGrammarParser.T__12 - 7)) | (1 << (rulePadGrammarParser.SPACE - 7)) | (1 << (rulePadGrammarParser.Alphabet - 7)) | (1 << (rulePadGrammarParser.LPAREN - 7)) | (1 << (rulePadGrammarParser.RPAREN - 7)))) !== 0)) {
            this.state = 345;
            this.identifiers();
        }

        this.state = 348;
        this.match(rulePadGrammarParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MustContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_must;
    return this;
}

MustContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MustContext.prototype.constructor = MustContext;


MustContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterMust(this);
	}
};

MustContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitMust(this);
	}
};




rulePadGrammarParser.MustContext = MustContext;

rulePadGrammarParser.prototype.must = function() {

    var localctx = new MustContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, rulePadGrammarParser.RULE_must);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 350;
        this.match(rulePadGrammarParser.T__27);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_of;
    return this;
}

OfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OfContext.prototype.constructor = OfContext;


OfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterOf(this);
	}
};

OfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitOf(this);
	}
};




rulePadGrammarParser.OfContext = OfContext;

rulePadGrammarParser.prototype.of = function() {

    var localctx = new OfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, rulePadGrammarParser.RULE_of);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 352;
        this.match(rulePadGrammarParser.T__28);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_and;
    return this;
}

AndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AndContext.prototype.constructor = AndContext;


AndContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterAnd(this);
	}
};

AndContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitAnd(this);
	}
};




rulePadGrammarParser.AndContext = AndContext;

rulePadGrammarParser.prototype.and = function() {

    var localctx = new AndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, rulePadGrammarParser.RULE_and);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 354;
        this.match(rulePadGrammarParser.T__29);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_or;
    return this;
}

OrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrContext.prototype.constructor = OrContext;


OrContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterOr(this);
	}
};

OrContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitOr(this);
	}
};




rulePadGrammarParser.OrContext = OrContext;

rulePadGrammarParser.prototype.or = function() {

    var localctx = new OrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, rulePadGrammarParser.RULE_or);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 356;
        this.match(rulePadGrammarParser.T__30);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HaveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_have;
    return this;
}

HaveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HaveContext.prototype.constructor = HaveContext;


HaveContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterHave(this);
	}
};

HaveContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitHave(this);
	}
};




rulePadGrammarParser.HaveContext = HaveContext;

rulePadGrammarParser.prototype.have = function() {

    var localctx = new HaveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, rulePadGrammarParser.RULE_have);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 358;
        this.match(rulePadGrammarParser.T__31);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_withWord;
    return this;
}

WithWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithWordContext.prototype.constructor = WithWordContext;


WithWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterWithWord(this);
	}
};

WithWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitWithWord(this);
	}
};




rulePadGrammarParser.WithWordContext = WithWordContext;

rulePadGrammarParser.prototype.withWord = function() {

    var localctx = new WithWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, rulePadGrammarParser.RULE_withWord);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 360;
        this.match(rulePadGrammarParser.T__32);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BinaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_binary;
    return this;
}

BinaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinaryContext.prototype.constructor = BinaryContext;

BinaryContext.prototype.and = function() {
    return this.getTypedRuleContext(AndContext,0);
};

BinaryContext.prototype.or = function() {
    return this.getTypedRuleContext(OrContext,0);
};

BinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterBinary(this);
	}
};

BinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitBinary(this);
	}
};




rulePadGrammarParser.BinaryContext = BinaryContext;

rulePadGrammarParser.prototype.binary = function() {

    var localctx = new BinaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, rulePadGrammarParser.RULE_binary);
    try {
        this.state = 364;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.T__29:
            this.enterOuterAlt(localctx, 1);
            this.state = 362;
            this.and();
            break;
        case rulePadGrammarParser.T__30:
            this.enterOuterAlt(localctx, 2);
            this.state = 363;
            this.or();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_names;
    return this;
}

NamesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamesContext.prototype.constructor = NamesContext;

NamesContext.prototype.NAME = function() {
    return this.getToken(rulePadGrammarParser.NAME, 0);
};

NamesContext.prototype.nameCondition = function() {
    return this.getTypedRuleContext(NameConditionContext,0);
};

NamesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterNames(this);
	}
};

NamesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitNames(this);
	}
};




rulePadGrammarParser.NamesContext = NamesContext;

rulePadGrammarParser.prototype.names = function() {

    var localctx = new NamesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, rulePadGrammarParser.RULE_names);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 366;
        this.match(rulePadGrammarParser.NAME);
        this.state = 368;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 367;
            this.nameCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_nameCondition;
    return this;
}

NameConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameConditionContext.prototype.constructor = NameConditionContext;

NameConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

NameConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

NameConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterNameCondition(this);
	}
};

NameConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitNameCondition(this);
	}
};




rulePadGrammarParser.NameConditionContext = NameConditionContext;

rulePadGrammarParser.prototype.nameCondition = function() {

    var localctx = new NameConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, rulePadGrammarParser.RULE_nameCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        this.words();
        this.state = 371;
        this.match(rulePadGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassNamesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_classNames;
    return this;
}

ClassNamesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassNamesContext.prototype.constructor = ClassNamesContext;

ClassNamesContext.prototype.NAME = function() {
    return this.getToken(rulePadGrammarParser.NAME, 0);
};

ClassNamesContext.prototype.classNameCondition = function() {
    return this.getTypedRuleContext(ClassNameConditionContext,0);
};

ClassNamesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterClassNames(this);
	}
};

ClassNamesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitClassNames(this);
	}
};




rulePadGrammarParser.ClassNamesContext = ClassNamesContext;

rulePadGrammarParser.prototype.classNames = function() {

    var localctx = new ClassNamesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, rulePadGrammarParser.RULE_classNames);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 373;
        this.match(rulePadGrammarParser.NAME);
        this.state = 375;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 374;
            this.classNameCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassNameConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_classNameCondition;
    return this;
}

ClassNameConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassNameConditionContext.prototype.constructor = ClassNameConditionContext;

ClassNameConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

ClassNameConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ClassNameConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ClassNameConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterClassNameCondition(this);
	}
};

ClassNameConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitClassNameCondition(this);
	}
};




rulePadGrammarParser.ClassNameConditionContext = ClassNameConditionContext;

rulePadGrammarParser.prototype.classNameCondition = function() {

    var localctx = new ClassNameConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, rulePadGrammarParser.RULE_classNameCondition);
    try {
        this.state = 383;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 377;
            this.combinatorialWords();
            this.state = 378;
            this.match(rulePadGrammarParser.SPACE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 380;
            this.words();
            this.state = 381;
            this.match(rulePadGrammarParser.SPACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_annotations;
    return this;
}

AnnotationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationsContext.prototype.constructor = AnnotationsContext;

AnnotationsContext.prototype.ANNOTATION = function() {
    return this.getToken(rulePadGrammarParser.ANNOTATION, 0);
};

AnnotationsContext.prototype.annotationCondition = function() {
    return this.getTypedRuleContext(AnnotationConditionContext,0);
};

AnnotationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterAnnotations(this);
	}
};

AnnotationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitAnnotations(this);
	}
};




rulePadGrammarParser.AnnotationsContext = AnnotationsContext;

rulePadGrammarParser.prototype.annotations = function() {

    var localctx = new AnnotationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, rulePadGrammarParser.RULE_annotations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 385;
        this.match(rulePadGrammarParser.ANNOTATION);
        this.state = 387;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        if(la_===1) {
            this.state = 386;
            this.annotationCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_annotationCondition;
    return this;
}

AnnotationConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationConditionContext.prototype.constructor = AnnotationConditionContext;

AnnotationConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

AnnotationConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

AnnotationConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

AnnotationConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterAnnotationCondition(this);
	}
};

AnnotationConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitAnnotationCondition(this);
	}
};




rulePadGrammarParser.AnnotationConditionContext = AnnotationConditionContext;

rulePadGrammarParser.prototype.annotationCondition = function() {

    var localctx = new AnnotationConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, rulePadGrammarParser.RULE_annotationCondition);
    try {
        this.state = 395;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 389;
            this.combinatorialWords();
            this.state = 390;
            this.match(rulePadGrammarParser.SPACE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 392;
            this.words();
            this.state = 393;
            this.match(rulePadGrammarParser.SPACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtensionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_extensions;
    return this;
}

ExtensionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionsContext.prototype.constructor = ExtensionsContext;

ExtensionsContext.prototype.EXTENSION = function() {
    return this.getToken(rulePadGrammarParser.EXTENSION, 0);
};

ExtensionsContext.prototype.extensionCondition = function() {
    return this.getTypedRuleContext(ExtensionConditionContext,0);
};

ExtensionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterExtensions(this);
	}
};

ExtensionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitExtensions(this);
	}
};




rulePadGrammarParser.ExtensionsContext = ExtensionsContext;

rulePadGrammarParser.prototype.extensions = function() {

    var localctx = new ExtensionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, rulePadGrammarParser.RULE_extensions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 397;
        this.match(rulePadGrammarParser.EXTENSION);
        this.state = 398;
        this.extensionCondition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtensionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_extensionCondition;
    return this;
}

ExtensionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionConditionContext.prototype.constructor = ExtensionConditionContext;

ExtensionConditionContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ExtensionConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

ExtensionConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ExtensionConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ExtensionConditionContext.prototype.SUPERCLASS = function() {
    return this.getToken(rulePadGrammarParser.SUPERCLASS, 0);
};

ExtensionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterExtensionCondition(this);
	}
};

ExtensionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitExtensionCondition(this);
	}
};




rulePadGrammarParser.ExtensionConditionContext = ExtensionConditionContext;

rulePadGrammarParser.prototype.extensionCondition = function() {

    var localctx = new ExtensionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, rulePadGrammarParser.RULE_extensionCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 400;
        this.of();
        this.state = 408;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.state = 401;
            this.combinatorialWords();
            this.state = 402;
            this.match(rulePadGrammarParser.SPACE);
            break;

        case 2:
            this.state = 404;
            this.words();
            this.state = 405;
            this.match(rulePadGrammarParser.SPACE);
            break;

        case 3:
            this.state = 407;
            this.match(rulePadGrammarParser.SUPERCLASS);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImplementationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_implementations;
    return this;
}

ImplementationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementationsContext.prototype.constructor = ImplementationsContext;

ImplementationsContext.prototype.IMPLEMENTATION = function() {
    return this.getToken(rulePadGrammarParser.IMPLEMENTATION, 0);
};

ImplementationsContext.prototype.implementationCondition = function() {
    return this.getTypedRuleContext(ImplementationConditionContext,0);
};

ImplementationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterImplementations(this);
	}
};

ImplementationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitImplementations(this);
	}
};




rulePadGrammarParser.ImplementationsContext = ImplementationsContext;

rulePadGrammarParser.prototype.implementations = function() {

    var localctx = new ImplementationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, rulePadGrammarParser.RULE_implementations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 410;
        this.match(rulePadGrammarParser.IMPLEMENTATION);
        this.state = 411;
        this.implementationCondition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImplementationConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_implementationCondition;
    return this;
}

ImplementationConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementationConditionContext.prototype.constructor = ImplementationConditionContext;

ImplementationConditionContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ImplementationConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

ImplementationConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ImplementationConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ImplementationConditionContext.prototype.INTERFACE = function() {
    return this.getToken(rulePadGrammarParser.INTERFACE, 0);
};

ImplementationConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterImplementationCondition(this);
	}
};

ImplementationConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitImplementationCondition(this);
	}
};




rulePadGrammarParser.ImplementationConditionContext = ImplementationConditionContext;

rulePadGrammarParser.prototype.implementationCondition = function() {

    var localctx = new ImplementationConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, rulePadGrammarParser.RULE_implementationCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 413;
        this.of();
        this.state = 421;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        switch(la_) {
        case 1:
            this.state = 414;
            this.combinatorialWords();
            this.state = 415;
            this.match(rulePadGrammarParser.SPACE);
            break;

        case 2:
            this.state = 417;
            this.words();
            this.state = 418;
            this.match(rulePadGrammarParser.SPACE);
            break;

        case 3:
            this.state = 420;
            this.match(rulePadGrammarParser.INTERFACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_functions;
    return this;
}

FunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionsContext.prototype.constructor = FunctionsContext;

FunctionsContext.prototype.FUNCTION = function() {
    return this.getToken(rulePadGrammarParser.FUNCTION, 0);
};

FunctionsContext.prototype.functionCondition = function() {
    return this.getTypedRuleContext(FunctionConditionContext,0);
};

FunctionsContext.prototype.functionOf = function() {
    return this.getTypedRuleContext(FunctionOfContext,0);
};

FunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterFunctions(this);
	}
};

FunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitFunctions(this);
	}
};




rulePadGrammarParser.FunctionsContext = FunctionsContext;

rulePadGrammarParser.prototype.functions = function() {

    var localctx = new FunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, rulePadGrammarParser.RULE_functions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 423;
        this.match(rulePadGrammarParser.FUNCTION);
        this.state = 425;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        if(la_===1) {
            this.state = 424;
            this.functionCondition();

        }
        this.state = 428;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        if(la_===1) {
            this.state = 427;
            this.functionOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_functionOf;
    return this;
}

FunctionOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionOfContext.prototype.constructor = FunctionOfContext;

FunctionOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

FunctionOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

FunctionOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterFunctionOf(this);
	}
};

FunctionOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitFunctionOf(this);
	}
};




rulePadGrammarParser.FunctionOfContext = FunctionOfContext;

rulePadGrammarParser.prototype.functionOf = function() {

    var localctx = new FunctionOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, rulePadGrammarParser.RULE_functionOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 430;
        this.of();
        this.state = 431;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_functionCondition;
    return this;
}

FunctionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionConditionContext.prototype.constructor = FunctionConditionContext;

FunctionConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

FunctionConditionContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};

FunctionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterFunctionCondition(this);
	}
};

FunctionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitFunctionCondition(this);
	}
};




rulePadGrammarParser.FunctionConditionContext = FunctionConditionContext;

rulePadGrammarParser.prototype.functionCondition = function() {

    var localctx = new FunctionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, rulePadGrammarParser.RULE_functionCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 433;
        this.withWord();
        this.state = 434;
        this.functionExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_functionExpression;
    this.left = null; // FunctionExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // FunctionExpressionContext
    return this;
}

FunctionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionExpressionContext.prototype.constructor = FunctionExpressionContext;

FunctionExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

FunctionExpressionContext.prototype.functionExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionExpressionContext);
    } else {
        return this.getTypedRuleContext(FunctionExpressionContext,i);
    }
};

FunctionExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

FunctionExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

FunctionExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

FunctionExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

FunctionExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

FunctionExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

FunctionExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

FunctionExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

FunctionExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

FunctionExpressionContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

FunctionExpressionContext.prototype.comments = function() {
    return this.getTypedRuleContext(CommentsContext,0);
};

FunctionExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

FunctionExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

FunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterFunctionExpression(this);
	}
};

FunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitFunctionExpression(this);
	}
};



rulePadGrammarParser.prototype.functionExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new FunctionExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 66;
    this.enterRecursionRule(localctx, 66, rulePadGrammarParser.RULE_functionExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 453;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.LPAREN:
            this.state = 437;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 438;
            this.functionExpression(0);
            this.state = 439;
            this.match(rulePadGrammarParser.RPAREN);
            break;
        case rulePadGrammarParser.T__0:
        case rulePadGrammarParser.NAME:
        case rulePadGrammarParser.ANNOTATION:
        case rulePadGrammarParser.PARAMETER:
        case rulePadGrammarParser.TYPES:
        case rulePadGrammarParser.SPECIFIER:
        case rulePadGrammarParser.VISIBILITY:
        case rulePadGrammarParser.ReturnValue:
        case rulePadGrammarParser.DeclarationStatement:
        case rulePadGrammarParser.ExpressionStatement:
            this.state = 451;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.ANNOTATION:
                this.state = 441;
                this.annotations();
                break;
            case rulePadGrammarParser.SPECIFIER:
                this.state = 442;
                this.specifiers();
                break;
            case rulePadGrammarParser.VISIBILITY:
                this.state = 443;
                this.visibilities();
                break;
            case rulePadGrammarParser.TYPES:
                this.state = 444;
                this.types();
                break;
            case rulePadGrammarParser.NAME:
                this.state = 445;
                this.names();
                break;
            case rulePadGrammarParser.PARAMETER:
                this.state = 446;
                this.parameters();
                break;
            case rulePadGrammarParser.ReturnValue:
                this.state = 447;
                this.returnValues();
                break;
            case rulePadGrammarParser.DeclarationStatement:
                this.state = 448;
                this.declarationStatements();
                break;
            case rulePadGrammarParser.ExpressionStatement:
                this.state = 449;
                this.expressionStatements();
                break;
            case rulePadGrammarParser.T__0:
                this.state = 450;
                this.comments();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 463;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,42,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 461;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new FunctionExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_functionExpression);
                    this.state = 455;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 456;
                    localctx.op = this.binary();
                    this.state = 457;
                    localctx.right = this.functionExpression(4);
                    break;

                case 2:
                    localctx = new FunctionExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_functionExpression);
                    this.state = 459;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 460;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 465;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,42,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AbstractFunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_abstractFunctions;
    return this;
}

AbstractFunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionsContext.prototype.constructor = AbstractFunctionsContext;

AbstractFunctionsContext.prototype.AbstractFunctions = function() {
    return this.getToken(rulePadGrammarParser.AbstractFunctions, 0);
};

AbstractFunctionsContext.prototype.abstractFunctionCondition = function() {
    return this.getTypedRuleContext(AbstractFunctionConditionContext,0);
};

AbstractFunctionsContext.prototype.abstractFunctionOf = function() {
    return this.getTypedRuleContext(AbstractFunctionOfContext,0);
};

AbstractFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterAbstractFunctions(this);
	}
};

AbstractFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitAbstractFunctions(this);
	}
};




rulePadGrammarParser.AbstractFunctionsContext = AbstractFunctionsContext;

rulePadGrammarParser.prototype.abstractFunctions = function() {

    var localctx = new AbstractFunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, rulePadGrammarParser.RULE_abstractFunctions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 466;
        this.match(rulePadGrammarParser.AbstractFunctions);
        this.state = 468;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        if(la_===1) {
            this.state = 467;
            this.abstractFunctionCondition();

        }
        this.state = 471;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        if(la_===1) {
            this.state = 470;
            this.abstractFunctionOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_abstractFunctionOf;
    return this;
}

AbstractFunctionOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionOfContext.prototype.constructor = AbstractFunctionOfContext;

AbstractFunctionOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

AbstractFunctionOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

AbstractFunctionOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterAbstractFunctionOf(this);
	}
};

AbstractFunctionOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitAbstractFunctionOf(this);
	}
};




rulePadGrammarParser.AbstractFunctionOfContext = AbstractFunctionOfContext;

rulePadGrammarParser.prototype.abstractFunctionOf = function() {

    var localctx = new AbstractFunctionOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, rulePadGrammarParser.RULE_abstractFunctionOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 473;
        this.of();
        this.state = 474;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_abstractFunctionCondition;
    return this;
}

AbstractFunctionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionConditionContext.prototype.constructor = AbstractFunctionConditionContext;

AbstractFunctionConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

AbstractFunctionConditionContext.prototype.abstractFunctionExpression = function() {
    return this.getTypedRuleContext(AbstractFunctionExpressionContext,0);
};

AbstractFunctionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterAbstractFunctionCondition(this);
	}
};

AbstractFunctionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitAbstractFunctionCondition(this);
	}
};




rulePadGrammarParser.AbstractFunctionConditionContext = AbstractFunctionConditionContext;

rulePadGrammarParser.prototype.abstractFunctionCondition = function() {

    var localctx = new AbstractFunctionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, rulePadGrammarParser.RULE_abstractFunctionCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 476;
        this.withWord();
        this.state = 477;
        this.abstractFunctionExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_abstractFunctionExpression;
    this.left = null; // AbstractFunctionExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // AbstractFunctionExpressionContext
    return this;
}

AbstractFunctionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionExpressionContext.prototype.constructor = AbstractFunctionExpressionContext;

AbstractFunctionExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

AbstractFunctionExpressionContext.prototype.abstractFunctionExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AbstractFunctionExpressionContext);
    } else {
        return this.getTypedRuleContext(AbstractFunctionExpressionContext,i);
    }
};

AbstractFunctionExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

AbstractFunctionExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

AbstractFunctionExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

AbstractFunctionExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

AbstractFunctionExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

AbstractFunctionExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

AbstractFunctionExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

AbstractFunctionExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

AbstractFunctionExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

AbstractFunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterAbstractFunctionExpression(this);
	}
};

AbstractFunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitAbstractFunctionExpression(this);
	}
};



rulePadGrammarParser.prototype.abstractFunctionExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AbstractFunctionExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 74;
    this.enterRecursionRule(localctx, 74, rulePadGrammarParser.RULE_abstractFunctionExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 492;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.LPAREN:
            this.state = 480;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 481;
            this.abstractFunctionExpression(0);
            this.state = 482;
            this.match(rulePadGrammarParser.RPAREN);
            break;
        case rulePadGrammarParser.NAME:
        case rulePadGrammarParser.ANNOTATION:
        case rulePadGrammarParser.PARAMETER:
        case rulePadGrammarParser.TYPES:
        case rulePadGrammarParser.SPECIFIER:
        case rulePadGrammarParser.VISIBILITY:
            this.state = 490;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.ANNOTATION:
                this.state = 484;
                this.annotations();
                break;
            case rulePadGrammarParser.SPECIFIER:
                this.state = 485;
                this.specifiers();
                break;
            case rulePadGrammarParser.VISIBILITY:
                this.state = 486;
                this.visibilities();
                break;
            case rulePadGrammarParser.TYPES:
                this.state = 487;
                this.types();
                break;
            case rulePadGrammarParser.NAME:
                this.state = 488;
                this.names();
                break;
            case rulePadGrammarParser.PARAMETER:
                this.state = 489;
                this.parameters();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 502;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 500;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AbstractFunctionExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_abstractFunctionExpression);
                    this.state = 494;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 495;
                    localctx.op = this.binary();
                    this.state = 496;
                    localctx.right = this.abstractFunctionExpression(4);
                    break;

                case 2:
                    localctx = new AbstractFunctionExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_abstractFunctionExpression);
                    this.state = 498;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 499;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 504;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConstructorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_constructors;
    return this;
}

ConstructorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorsContext.prototype.constructor = ConstructorsContext;

ConstructorsContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(rulePadGrammarParser.CONSTRUCTOR, 0);
};

ConstructorsContext.prototype.constructorCondition = function() {
    return this.getTypedRuleContext(ConstructorConditionContext,0);
};

ConstructorsContext.prototype.constructorOf = function() {
    return this.getTypedRuleContext(ConstructorOfContext,0);
};

ConstructorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterConstructors(this);
	}
};

ConstructorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitConstructors(this);
	}
};




rulePadGrammarParser.ConstructorsContext = ConstructorsContext;

rulePadGrammarParser.prototype.constructors = function() {

    var localctx = new ConstructorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, rulePadGrammarParser.RULE_constructors);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 505;
        this.match(rulePadGrammarParser.CONSTRUCTOR);
        this.state = 507;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        if(la_===1) {
            this.state = 506;
            this.constructorCondition();

        }
        this.state = 510;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        if(la_===1) {
            this.state = 509;
            this.constructorOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_constructorOf;
    return this;
}

ConstructorOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorOfContext.prototype.constructor = ConstructorOfContext;

ConstructorOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ConstructorOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ConstructorOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterConstructorOf(this);
	}
};

ConstructorOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitConstructorOf(this);
	}
};




rulePadGrammarParser.ConstructorOfContext = ConstructorOfContext;

rulePadGrammarParser.prototype.constructorOf = function() {

    var localctx = new ConstructorOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, rulePadGrammarParser.RULE_constructorOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 512;
        this.of();
        this.state = 513;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_constructorCondition;
    return this;
}

ConstructorConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorConditionContext.prototype.constructor = ConstructorConditionContext;

ConstructorConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

ConstructorConditionContext.prototype.constructorExpression = function() {
    return this.getTypedRuleContext(ConstructorExpressionContext,0);
};

ConstructorConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterConstructorCondition(this);
	}
};

ConstructorConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitConstructorCondition(this);
	}
};




rulePadGrammarParser.ConstructorConditionContext = ConstructorConditionContext;

rulePadGrammarParser.prototype.constructorCondition = function() {

    var localctx = new ConstructorConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, rulePadGrammarParser.RULE_constructorCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 515;
        this.withWord();
        this.state = 516;
        this.constructorExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_constructorExpression;
    this.left = null; // ConstructorExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ConstructorExpressionContext
    return this;
}

ConstructorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorExpressionContext.prototype.constructor = ConstructorExpressionContext;

ConstructorExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

ConstructorExpressionContext.prototype.constructorExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstructorExpressionContext);
    } else {
        return this.getTypedRuleContext(ConstructorExpressionContext,i);
    }
};

ConstructorExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

ConstructorExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

ConstructorExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

ConstructorExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

ConstructorExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ConstructorExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

ConstructorExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

ConstructorExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

ConstructorExpressionContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

ConstructorExpressionContext.prototype.comments = function() {
    return this.getTypedRuleContext(CommentsContext,0);
};

ConstructorExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ConstructorExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ConstructorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterConstructorExpression(this);
	}
};

ConstructorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitConstructorExpression(this);
	}
};



rulePadGrammarParser.prototype.constructorExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ConstructorExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 82;
    this.enterRecursionRule(localctx, 82, rulePadGrammarParser.RULE_constructorExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 534;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.LPAREN:
            this.state = 519;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 520;
            this.constructorExpression(0);
            this.state = 521;
            this.match(rulePadGrammarParser.RPAREN);
            break;
        case rulePadGrammarParser.T__0:
        case rulePadGrammarParser.NAME:
        case rulePadGrammarParser.ANNOTATION:
        case rulePadGrammarParser.PARAMETER:
        case rulePadGrammarParser.SPECIFIER:
        case rulePadGrammarParser.VISIBILITY:
        case rulePadGrammarParser.ReturnValue:
        case rulePadGrammarParser.DeclarationStatement:
        case rulePadGrammarParser.ExpressionStatement:
            this.state = 532;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.ANNOTATION:
                this.state = 523;
                this.annotations();
                break;
            case rulePadGrammarParser.SPECIFIER:
                this.state = 524;
                this.specifiers();
                break;
            case rulePadGrammarParser.VISIBILITY:
                this.state = 525;
                this.visibilities();
                break;
            case rulePadGrammarParser.NAME:
                this.state = 526;
                this.names();
                break;
            case rulePadGrammarParser.PARAMETER:
                this.state = 527;
                this.parameters();
                break;
            case rulePadGrammarParser.ReturnValue:
                this.state = 528;
                this.returnValues();
                break;
            case rulePadGrammarParser.DeclarationStatement:
                this.state = 529;
                this.declarationStatements();
                break;
            case rulePadGrammarParser.ExpressionStatement:
                this.state = 530;
                this.expressionStatements();
                break;
            case rulePadGrammarParser.T__0:
                this.state = 531;
                this.comments();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 544;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 542;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ConstructorExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_constructorExpression);
                    this.state = 536;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 537;
                    localctx.op = this.binary();
                    this.state = 538;
                    localctx.right = this.constructorExpression(4);
                    break;

                case 2:
                    localctx = new ConstructorExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_constructorExpression);
                    this.state = 540;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 541;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 546;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_parameters;
    return this;
}

ParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersContext.prototype.constructor = ParametersContext;

ParametersContext.prototype.PARAMETER = function() {
    return this.getToken(rulePadGrammarParser.PARAMETER, 0);
};

ParametersContext.prototype.parameterCondition = function() {
    return this.getTypedRuleContext(ParameterConditionContext,0);
};

ParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterParameters(this);
	}
};

ParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitParameters(this);
	}
};




rulePadGrammarParser.ParametersContext = ParametersContext;

rulePadGrammarParser.prototype.parameters = function() {

    var localctx = new ParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, rulePadGrammarParser.RULE_parameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 547;
        this.match(rulePadGrammarParser.PARAMETER);
        this.state = 549;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        if(la_===1) {
            this.state = 548;
            this.parameterCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_parameterCondition;
    return this;
}

ParameterConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterConditionContext.prototype.constructor = ParameterConditionContext;

ParameterConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

ParameterConditionContext.prototype.parameterExpression = function() {
    return this.getTypedRuleContext(ParameterExpressionContext,0);
};

ParameterConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterParameterCondition(this);
	}
};

ParameterConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitParameterCondition(this);
	}
};




rulePadGrammarParser.ParameterConditionContext = ParameterConditionContext;

rulePadGrammarParser.prototype.parameterCondition = function() {

    var localctx = new ParameterConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, rulePadGrammarParser.RULE_parameterCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 551;
        this.withWord();
        this.state = 552;
        this.parameterExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_parameterExpression;
    this.left = null; // ParameterExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ParameterExpressionContext
    return this;
}

ParameterExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterExpressionContext.prototype.constructor = ParameterExpressionContext;

ParameterExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

ParameterExpressionContext.prototype.parameterExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterExpressionContext);
    } else {
        return this.getTypedRuleContext(ParameterExpressionContext,i);
    }
};

ParameterExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

ParameterExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

ParameterExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ParameterExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ParameterExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ParameterExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterParameterExpression(this);
	}
};

ParameterExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitParameterExpression(this);
	}
};



rulePadGrammarParser.prototype.parameterExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ParameterExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 88;
    this.enterRecursionRule(localctx, 88, rulePadGrammarParser.RULE_parameterExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 563;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.LPAREN:
            this.state = 555;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 556;
            this.parameterExpression(0);
            this.state = 557;
            this.match(rulePadGrammarParser.RPAREN);
            break;
        case rulePadGrammarParser.NAME:
        case rulePadGrammarParser.TYPES:
            this.state = 561;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.TYPES:
                this.state = 559;
                this.types();
                break;
            case rulePadGrammarParser.NAME:
                this.state = 560;
                this.names();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 573;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 571;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ParameterExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_parameterExpression);
                    this.state = 565;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 566;
                    localctx.op = this.binary();
                    this.state = 567;
                    localctx.right = this.parameterExpression(4);
                    break;

                case 2:
                    localctx = new ParameterExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_parameterExpression);
                    this.state = 569;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 570;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 575;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_types;
    return this;
}

TypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypesContext.prototype.constructor = TypesContext;

TypesContext.prototype.TYPES = function() {
    return this.getToken(rulePadGrammarParser.TYPES, 0);
};

TypesContext.prototype.typeCondition = function() {
    return this.getTypedRuleContext(TypeConditionContext,0);
};

TypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterTypes(this);
	}
};

TypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitTypes(this);
	}
};




rulePadGrammarParser.TypesContext = TypesContext;

rulePadGrammarParser.prototype.types = function() {

    var localctx = new TypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, rulePadGrammarParser.RULE_types);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 576;
        this.match(rulePadGrammarParser.TYPES);
        this.state = 578;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
        if(la_===1) {
            this.state = 577;
            this.typeCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_typeCondition;
    return this;
}

TypeConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeConditionContext.prototype.constructor = TypeConditionContext;

TypeConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

TypeConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

TypeConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

TypeConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterTypeCondition(this);
	}
};

TypeConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitTypeCondition(this);
	}
};




rulePadGrammarParser.TypeConditionContext = TypeConditionContext;

rulePadGrammarParser.prototype.typeCondition = function() {

    var localctx = new TypeConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, rulePadGrammarParser.RULE_typeCondition);
    try {
        this.state = 586;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 580;
            this.combinatorialWords();
            this.state = 581;
            this.match(rulePadGrammarParser.SPACE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 583;
            this.words();
            this.state = 584;
            this.match(rulePadGrammarParser.SPACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_specifiers;
    return this;
}

SpecifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifiersContext.prototype.constructor = SpecifiersContext;

SpecifiersContext.prototype.SPECIFIER = function() {
    return this.getToken(rulePadGrammarParser.SPECIFIER, 0);
};

SpecifiersContext.prototype.specifierCondition = function() {
    return this.getTypedRuleContext(SpecifierConditionContext,0);
};

SpecifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterSpecifiers(this);
	}
};

SpecifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitSpecifiers(this);
	}
};




rulePadGrammarParser.SpecifiersContext = SpecifiersContext;

rulePadGrammarParser.prototype.specifiers = function() {

    var localctx = new SpecifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, rulePadGrammarParser.RULE_specifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 588;
        this.match(rulePadGrammarParser.SPECIFIER);
        this.state = 590;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        if(la_===1) {
            this.state = 589;
            this.specifierCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifierConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_specifierCondition;
    return this;
}

SpecifierConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifierConditionContext.prototype.constructor = SpecifierConditionContext;

SpecifierConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

SpecifierConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

SpecifierConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterSpecifierCondition(this);
	}
};

SpecifierConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitSpecifierCondition(this);
	}
};




rulePadGrammarParser.SpecifierConditionContext = SpecifierConditionContext;

rulePadGrammarParser.prototype.specifierCondition = function() {

    var localctx = new SpecifierConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, rulePadGrammarParser.RULE_specifierCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 592;
        this.words();
        this.state = 593;
        this.match(rulePadGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VisibilitiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_visibilities;
    return this;
}

VisibilitiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilitiesContext.prototype.constructor = VisibilitiesContext;

VisibilitiesContext.prototype.VISIBILITY = function() {
    return this.getToken(rulePadGrammarParser.VISIBILITY, 0);
};

VisibilitiesContext.prototype.visibilityCondition = function() {
    return this.getTypedRuleContext(VisibilityConditionContext,0);
};

VisibilitiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterVisibilities(this);
	}
};

VisibilitiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitVisibilities(this);
	}
};




rulePadGrammarParser.VisibilitiesContext = VisibilitiesContext;

rulePadGrammarParser.prototype.visibilities = function() {

    var localctx = new VisibilitiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, rulePadGrammarParser.RULE_visibilities);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 595;
        this.match(rulePadGrammarParser.VISIBILITY);
        this.state = 597;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        if(la_===1) {
            this.state = 596;
            this.visibilityCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VisibilityConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_visibilityCondition;
    return this;
}

VisibilityConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilityConditionContext.prototype.constructor = VisibilityConditionContext;

VisibilityConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

VisibilityConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

VisibilityConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterVisibilityCondition(this);
	}
};

VisibilityConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitVisibilityCondition(this);
	}
};




rulePadGrammarParser.VisibilityConditionContext = VisibilityConditionContext;

rulePadGrammarParser.prototype.visibilityCondition = function() {

    var localctx = new VisibilityConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, rulePadGrammarParser.RULE_visibilityCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 599;
        this.words();
        this.state = 600;
        this.match(rulePadGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_returnValues;
    return this;
}

ReturnValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValuesContext.prototype.constructor = ReturnValuesContext;

ReturnValuesContext.prototype.ReturnValue = function() {
    return this.getToken(rulePadGrammarParser.ReturnValue, 0);
};

ReturnValuesContext.prototype.returnValueCondition = function() {
    return this.getTypedRuleContext(ReturnValueConditionContext,0);
};

ReturnValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterReturnValues(this);
	}
};

ReturnValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitReturnValues(this);
	}
};




rulePadGrammarParser.ReturnValuesContext = ReturnValuesContext;

rulePadGrammarParser.prototype.returnValues = function() {

    var localctx = new ReturnValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, rulePadGrammarParser.RULE_returnValues);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 602;
        this.match(rulePadGrammarParser.ReturnValue);
        this.state = 604;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        if(la_===1) {
            this.state = 603;
            this.returnValueCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValueConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_returnValueCondition;
    return this;
}

ReturnValueConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValueConditionContext.prototype.constructor = ReturnValueConditionContext;

ReturnValueConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

ReturnValueConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ReturnValueConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterReturnValueCondition(this);
	}
};

ReturnValueConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitReturnValueCondition(this);
	}
};




rulePadGrammarParser.ReturnValueConditionContext = ReturnValueConditionContext;

rulePadGrammarParser.prototype.returnValueCondition = function() {

    var localctx = new ReturnValueConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, rulePadGrammarParser.RULE_returnValueCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 606;
        this.combinatorialWords();
        this.state = 607;
        this.match(rulePadGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_declarationStatements;
    return this;
}

DeclarationStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementsContext.prototype.constructor = DeclarationStatementsContext;

DeclarationStatementsContext.prototype.DeclarationStatement = function() {
    return this.getToken(rulePadGrammarParser.DeclarationStatement, 0);
};

DeclarationStatementsContext.prototype.declarationStatementCondition = function() {
    return this.getTypedRuleContext(DeclarationStatementConditionContext,0);
};

DeclarationStatementsContext.prototype.declarationStatementOf = function() {
    return this.getTypedRuleContext(DeclarationStatementOfContext,0);
};

DeclarationStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterDeclarationStatements(this);
	}
};

DeclarationStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitDeclarationStatements(this);
	}
};




rulePadGrammarParser.DeclarationStatementsContext = DeclarationStatementsContext;

rulePadGrammarParser.prototype.declarationStatements = function() {

    var localctx = new DeclarationStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, rulePadGrammarParser.RULE_declarationStatements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 609;
        this.match(rulePadGrammarParser.DeclarationStatement);
        this.state = 611;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        if(la_===1) {
            this.state = 610;
            this.declarationStatementCondition();

        }
        this.state = 614;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        if(la_===1) {
            this.state = 613;
            this.declarationStatementOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_declarationStatementOf;
    return this;
}

DeclarationStatementOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementOfContext.prototype.constructor = DeclarationStatementOfContext;

DeclarationStatementOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

DeclarationStatementOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

DeclarationStatementOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

DeclarationStatementOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

DeclarationStatementOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterDeclarationStatementOf(this);
	}
};

DeclarationStatementOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitDeclarationStatementOf(this);
	}
};




rulePadGrammarParser.DeclarationStatementOfContext = DeclarationStatementOfContext;

rulePadGrammarParser.prototype.declarationStatementOf = function() {

    var localctx = new DeclarationStatementOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, rulePadGrammarParser.RULE_declarationStatementOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 616;
        this.of();
        this.state = 620;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.CLASSES:
            this.state = 617;
            this.classes();
            break;
        case rulePadGrammarParser.FUNCTION:
            this.state = 618;
            this.functions();
            break;
        case rulePadGrammarParser.CONSTRUCTOR:
            this.state = 619;
            this.constructors();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_declarationStatementCondition;
    return this;
}

DeclarationStatementConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementConditionContext.prototype.constructor = DeclarationStatementConditionContext;

DeclarationStatementConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

DeclarationStatementConditionContext.prototype.declarationStatementExpression = function() {
    return this.getTypedRuleContext(DeclarationStatementExpressionContext,0);
};

DeclarationStatementConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterDeclarationStatementCondition(this);
	}
};

DeclarationStatementConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitDeclarationStatementCondition(this);
	}
};




rulePadGrammarParser.DeclarationStatementConditionContext = DeclarationStatementConditionContext;

rulePadGrammarParser.prototype.declarationStatementCondition = function() {

    var localctx = new DeclarationStatementConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, rulePadGrammarParser.RULE_declarationStatementCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 622;
        this.withWord();
        this.state = 623;
        this.declarationStatementExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_declarationStatementExpression;
    this.left = null; // DeclarationStatementExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // DeclarationStatementExpressionContext
    return this;
}

DeclarationStatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementExpressionContext.prototype.constructor = DeclarationStatementExpressionContext;

DeclarationStatementExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

DeclarationStatementExpressionContext.prototype.declarationStatementExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationStatementExpressionContext);
    } else {
        return this.getTypedRuleContext(DeclarationStatementExpressionContext,i);
    }
};

DeclarationStatementExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

DeclarationStatementExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

DeclarationStatementExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

DeclarationStatementExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

DeclarationStatementExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

DeclarationStatementExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

DeclarationStatementExpressionContext.prototype.initialValues = function() {
    return this.getTypedRuleContext(InitialValuesContext,0);
};

DeclarationStatementExpressionContext.prototype.comments = function() {
    return this.getTypedRuleContext(CommentsContext,0);
};

DeclarationStatementExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

DeclarationStatementExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

DeclarationStatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterDeclarationStatementExpression(this);
	}
};

DeclarationStatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitDeclarationStatementExpression(this);
	}
};



rulePadGrammarParser.prototype.declarationStatementExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DeclarationStatementExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 112;
    this.enterRecursionRule(localctx, 112, rulePadGrammarParser.RULE_declarationStatementExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.LPAREN:
            this.state = 626;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 627;
            this.declarationStatementExpression(0);
            this.state = 628;
            this.match(rulePadGrammarParser.RPAREN);
            break;
        case rulePadGrammarParser.T__0:
        case rulePadGrammarParser.NAME:
        case rulePadGrammarParser.ANNOTATION:
        case rulePadGrammarParser.TYPES:
        case rulePadGrammarParser.SPECIFIER:
        case rulePadGrammarParser.VISIBILITY:
        case rulePadGrammarParser.InitialValue:
            this.state = 637;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.ANNOTATION:
                this.state = 630;
                this.annotations();
                break;
            case rulePadGrammarParser.SPECIFIER:
                this.state = 631;
                this.specifiers();
                break;
            case rulePadGrammarParser.VISIBILITY:
                this.state = 632;
                this.visibilities();
                break;
            case rulePadGrammarParser.TYPES:
                this.state = 633;
                this.types();
                break;
            case rulePadGrammarParser.NAME:
                this.state = 634;
                this.names();
                break;
            case rulePadGrammarParser.InitialValue:
                this.state = 635;
                this.initialValues();
                break;
            case rulePadGrammarParser.T__0:
                this.state = 636;
                this.comments();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 649;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 647;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new DeclarationStatementExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_declarationStatementExpression);
                    this.state = 641;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 642;
                    localctx.op = this.binary();
                    this.state = 643;
                    localctx.right = this.declarationStatementExpression(4);
                    break;

                case 2:
                    localctx = new DeclarationStatementExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_declarationStatementExpression);
                    this.state = 645;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 646;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 651;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExpressionStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_expressionStatements;
    return this;
}

ExpressionStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementsContext.prototype.constructor = ExpressionStatementsContext;

ExpressionStatementsContext.prototype.ExpressionStatement = function() {
    return this.getToken(rulePadGrammarParser.ExpressionStatement, 0);
};

ExpressionStatementsContext.prototype.expressionStatementCondition = function() {
    return this.getTypedRuleContext(ExpressionStatementConditionContext,0);
};

ExpressionStatementsContext.prototype.expressionStatementOf = function() {
    return this.getTypedRuleContext(ExpressionStatementOfContext,0);
};

ExpressionStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterExpressionStatements(this);
	}
};

ExpressionStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitExpressionStatements(this);
	}
};




rulePadGrammarParser.ExpressionStatementsContext = ExpressionStatementsContext;

rulePadGrammarParser.prototype.expressionStatements = function() {

    var localctx = new ExpressionStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, rulePadGrammarParser.RULE_expressionStatements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 652;
        this.match(rulePadGrammarParser.ExpressionStatement);
        this.state = 654;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 653;
            this.expressionStatementCondition();

        }
        this.state = 657;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        if(la_===1) {
            this.state = 656;
            this.expressionStatementOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_expressionStatementOf;
    return this;
}

ExpressionStatementOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementOfContext.prototype.constructor = ExpressionStatementOfContext;

ExpressionStatementOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ExpressionStatementOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ExpressionStatementOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

ExpressionStatementOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterExpressionStatementOf(this);
	}
};

ExpressionStatementOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitExpressionStatementOf(this);
	}
};




rulePadGrammarParser.ExpressionStatementOfContext = ExpressionStatementOfContext;

rulePadGrammarParser.prototype.expressionStatementOf = function() {

    var localctx = new ExpressionStatementOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, rulePadGrammarParser.RULE_expressionStatementOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 659;
        this.of();
        this.state = 663;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            this.state = 660;
            this.functions();
            break;

        case 2:
            this.state = 661;
            this.constructors();
            break;

        case 3:
            this.state = 662;
            this.constructors();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_expressionStatementCondition;
    return this;
}

ExpressionStatementConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementConditionContext.prototype.constructor = ExpressionStatementConditionContext;

ExpressionStatementConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

ExpressionStatementConditionContext.prototype.expressionStatementExpression = function() {
    return this.getTypedRuleContext(ExpressionStatementExpressionContext,0);
};

ExpressionStatementConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterExpressionStatementCondition(this);
	}
};

ExpressionStatementConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitExpressionStatementCondition(this);
	}
};




rulePadGrammarParser.ExpressionStatementConditionContext = ExpressionStatementConditionContext;

rulePadGrammarParser.prototype.expressionStatementCondition = function() {

    var localctx = new ExpressionStatementConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, rulePadGrammarParser.RULE_expressionStatementCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 665;
        this.withWord();
        this.state = 666;
        this.expressionStatementExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_expressionStatementExpression;
    this.left = null; // ExpressionStatementExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ExpressionStatementExpressionContext
    return this;
}

ExpressionStatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementExpressionContext.prototype.constructor = ExpressionStatementExpressionContext;

ExpressionStatementExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

ExpressionStatementExpressionContext.prototype.expressionStatementExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionStatementExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionStatementExpressionContext,i);
    }
};

ExpressionStatementExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

ExpressionStatementExpressionContext.prototype.comments = function() {
    return this.getTypedRuleContext(CommentsContext,0);
};

ExpressionStatementExpressionContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ExpressionStatementExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ExpressionStatementExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ExpressionStatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterExpressionStatementExpression(this);
	}
};

ExpressionStatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitExpressionStatementExpression(this);
	}
};



rulePadGrammarParser.prototype.expressionStatementExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionStatementExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 120;
    this.enterRecursionRule(localctx, 120, rulePadGrammarParser.RULE_expressionStatementExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 677;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.LPAREN:
            this.state = 669;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 670;
            this.expressionStatementExpression(0);
            this.state = 671;
            this.match(rulePadGrammarParser.RPAREN);
            break;
        case rulePadGrammarParser.T__0:
        case rulePadGrammarParser.VALUE:
            this.state = 675;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.T__0:
                this.state = 673;
                this.comments();
                break;
            case rulePadGrammarParser.VALUE:
                this.state = 674;
                this.value();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 687;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 685;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionStatementExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_expressionStatementExpression);
                    this.state = 679;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 680;
                    localctx.op = this.binary();
                    this.state = 681;
                    localctx.right = this.expressionStatementExpression(4);
                    break;

                case 2:
                    localctx = new ExpressionStatementExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_expressionStatementExpression);
                    this.state = 683;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 684;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 689;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_value;
    return this;
}

ValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueContext.prototype.constructor = ValueContext;

ValueContext.prototype.VALUE = function() {
    return this.getToken(rulePadGrammarParser.VALUE, 0);
};

ValueContext.prototype.valueCondition = function() {
    return this.getTypedRuleContext(ValueConditionContext,0);
};

ValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterValue(this);
	}
};

ValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitValue(this);
	}
};




rulePadGrammarParser.ValueContext = ValueContext;

rulePadGrammarParser.prototype.value = function() {

    var localctx = new ValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, rulePadGrammarParser.RULE_value);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 690;
        this.match(rulePadGrammarParser.VALUE);
        this.state = 692;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        if(la_===1) {
            this.state = 691;
            this.valueCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_valueCondition;
    return this;
}

ValueConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueConditionContext.prototype.constructor = ValueConditionContext;

ValueConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

ValueConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ValueConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterValueCondition(this);
	}
};

ValueConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitValueCondition(this);
	}
};




rulePadGrammarParser.ValueConditionContext = ValueConditionContext;

rulePadGrammarParser.prototype.valueCondition = function() {

    var localctx = new ValueConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, rulePadGrammarParser.RULE_valueCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 694;
        this.combinatorialWords();
        this.state = 695;
        this.match(rulePadGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitialValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_initialValues;
    return this;
}

InitialValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitialValuesContext.prototype.constructor = InitialValuesContext;

InitialValuesContext.prototype.InitialValue = function() {
    return this.getToken(rulePadGrammarParser.InitialValue, 0);
};

InitialValuesContext.prototype.initialValueCondition = function() {
    return this.getTypedRuleContext(InitialValueConditionContext,0);
};

InitialValuesContext.prototype.initialValueOf = function() {
    return this.getTypedRuleContext(InitialValueOfContext,0);
};

InitialValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterInitialValues(this);
	}
};

InitialValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitInitialValues(this);
	}
};




rulePadGrammarParser.InitialValuesContext = InitialValuesContext;

rulePadGrammarParser.prototype.initialValues = function() {

    var localctx = new InitialValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, rulePadGrammarParser.RULE_initialValues);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 697;
        this.match(rulePadGrammarParser.InitialValue);
        this.state = 699;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        if(la_===1) {
            this.state = 698;
            this.initialValueCondition();

        }
        this.state = 702;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        if(la_===1) {
            this.state = 701;
            this.initialValueOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitialValueOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_initialValueOf;
    return this;
}

InitialValueOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitialValueOfContext.prototype.constructor = InitialValueOfContext;

InitialValueOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

InitialValueOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

InitialValueOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterInitialValueOf(this);
	}
};

InitialValueOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitInitialValueOf(this);
	}
};




rulePadGrammarParser.InitialValueOfContext = InitialValueOfContext;

rulePadGrammarParser.prototype.initialValueOf = function() {

    var localctx = new InitialValueOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, rulePadGrammarParser.RULE_initialValueOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 704;
        this.of();
        this.state = 705;
        this.declarationStatements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitialValueConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_initialValueCondition;
    return this;
}

InitialValueConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitialValueConditionContext.prototype.constructor = InitialValueConditionContext;

InitialValueConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

InitialValueConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

InitialValueConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterInitialValueCondition(this);
	}
};

InitialValueConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitInitialValueCondition(this);
	}
};




rulePadGrammarParser.InitialValueConditionContext = InitialValueConditionContext;

rulePadGrammarParser.prototype.initialValueCondition = function() {

    var localctx = new InitialValueConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, rulePadGrammarParser.RULE_initialValueCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 707;
        this.combinatorialWords();
        this.state = 708;
        this.match(rulePadGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_classes;
    return this;
}

ClassesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassesContext.prototype.constructor = ClassesContext;

ClassesContext.prototype.CLASSES = function() {
    return this.getToken(rulePadGrammarParser.CLASSES, 0);
};

ClassesContext.prototype.classCondition = function() {
    return this.getTypedRuleContext(ClassConditionContext,0);
};

ClassesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterClasses(this);
	}
};

ClassesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitClasses(this);
	}
};




rulePadGrammarParser.ClassesContext = ClassesContext;

rulePadGrammarParser.prototype.classes = function() {

    var localctx = new ClassesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, rulePadGrammarParser.RULE_classes);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 710;
        this.match(rulePadGrammarParser.CLASSES);
        this.state = 712;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        if(la_===1) {
            this.state = 711;
            this.classCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_classCondition;
    return this;
}

ClassConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassConditionContext.prototype.constructor = ClassConditionContext;

ClassConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

ClassConditionContext.prototype.classExpression = function() {
    return this.getTypedRuleContext(ClassExpressionContext,0);
};

ClassConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterClassCondition(this);
	}
};

ClassConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitClassCondition(this);
	}
};




rulePadGrammarParser.ClassConditionContext = ClassConditionContext;

rulePadGrammarParser.prototype.classCondition = function() {

    var localctx = new ClassConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, rulePadGrammarParser.RULE_classCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 714;
        this.withWord();
        this.state = 715;
        this.classExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_classExpression;
    this.left = null; // ClassExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ClassExpressionContext
    return this;
}

ClassExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassExpressionContext.prototype.constructor = ClassExpressionContext;

ClassExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

ClassExpressionContext.prototype.classExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassExpressionContext);
    } else {
        return this.getTypedRuleContext(ClassExpressionContext,i);
    }
};

ClassExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

ClassExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

ClassExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

ClassExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

ClassExpressionContext.prototype.classNames = function() {
    return this.getTypedRuleContext(ClassNamesContext,0);
};

ClassExpressionContext.prototype.extensions = function() {
    return this.getTypedRuleContext(ExtensionsContext,0);
};

ClassExpressionContext.prototype.implementations = function() {
    return this.getTypedRuleContext(ImplementationsContext,0);
};

ClassExpressionContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ClassExpressionContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

ClassExpressionContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

ClassExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

ClassExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

ClassExpressionContext.prototype.comments = function() {
    return this.getTypedRuleContext(CommentsContext,0);
};

ClassExpressionContext.prototype.subclasses = function() {
    return this.getTypedRuleContext(SubclassesContext,0);
};

ClassExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ClassExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ClassExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterClassExpression(this);
	}
};

ClassExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitClassExpression(this);
	}
};



rulePadGrammarParser.prototype.classExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ClassExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 136;
    this.enterRecursionRule(localctx, 136, rulePadGrammarParser.RULE_classExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 737;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.LPAREN:
            this.state = 718;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 719;
            this.classExpression(0);
            this.state = 720;
            this.match(rulePadGrammarParser.RPAREN);
            break;
        case rulePadGrammarParser.T__0:
        case rulePadGrammarParser.NAME:
        case rulePadGrammarParser.ANNOTATION:
        case rulePadGrammarParser.EXTENSION:
        case rulePadGrammarParser.IMPLEMENTATION:
        case rulePadGrammarParser.FUNCTION:
        case rulePadGrammarParser.AbstractFunctions:
        case rulePadGrammarParser.CONSTRUCTOR:
        case rulePadGrammarParser.SPECIFIER:
        case rulePadGrammarParser.VISIBILITY:
        case rulePadGrammarParser.ReturnValue:
        case rulePadGrammarParser.DeclarationStatement:
        case rulePadGrammarParser.SUBCLASSES:
            this.state = 735;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.ANNOTATION:
                this.state = 722;
                this.annotations();
                break;
            case rulePadGrammarParser.SPECIFIER:
                this.state = 723;
                this.specifiers();
                break;
            case rulePadGrammarParser.VISIBILITY:
                this.state = 724;
                this.visibilities();
                break;
            case rulePadGrammarParser.NAME:
                this.state = 725;
                this.classNames();
                break;
            case rulePadGrammarParser.EXTENSION:
                this.state = 726;
                this.extensions();
                break;
            case rulePadGrammarParser.IMPLEMENTATION:
                this.state = 727;
                this.implementations();
                break;
            case rulePadGrammarParser.FUNCTION:
                this.state = 728;
                this.functions();
                break;
            case rulePadGrammarParser.AbstractFunctions:
                this.state = 729;
                this.abstractFunctions();
                break;
            case rulePadGrammarParser.CONSTRUCTOR:
                this.state = 730;
                this.constructors();
                break;
            case rulePadGrammarParser.DeclarationStatement:
                this.state = 731;
                this.declarationStatements();
                break;
            case rulePadGrammarParser.ReturnValue:
                this.state = 732;
                this.returnValues();
                break;
            case rulePadGrammarParser.T__0:
                this.state = 733;
                this.comments();
                break;
            case rulePadGrammarParser.SUBCLASSES:
                this.state = 734;
                this.subclasses();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 747;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 745;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ClassExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_classExpression);
                    this.state = 739;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 740;
                    localctx.op = this.binary();
                    this.state = 741;
                    localctx.right = this.classExpression(4);
                    break;

                case 2:
                    localctx = new ClassExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_classExpression);
                    this.state = 743;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 744;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 749;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function SubclassesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_subclasses;
    return this;
}

SubclassesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubclassesContext.prototype.constructor = SubclassesContext;

SubclassesContext.prototype.SUBCLASSES = function() {
    return this.getToken(rulePadGrammarParser.SUBCLASSES, 0);
};

SubclassesContext.prototype.subclassCondition = function() {
    return this.getTypedRuleContext(SubclassConditionContext,0);
};

SubclassesContext.prototype.subclassOf = function() {
    return this.getTypedRuleContext(SubclassOfContext,0);
};

SubclassesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterSubclasses(this);
	}
};

SubclassesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitSubclasses(this);
	}
};




rulePadGrammarParser.SubclassesContext = SubclassesContext;

rulePadGrammarParser.prototype.subclasses = function() {

    var localctx = new SubclassesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, rulePadGrammarParser.RULE_subclasses);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 750;
        this.match(rulePadGrammarParser.SUBCLASSES);
        this.state = 752;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        if(la_===1) {
            this.state = 751;
            this.subclassCondition();

        }
        this.state = 755;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        if(la_===1) {
            this.state = 754;
            this.subclassOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubclassOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_subclassOf;
    return this;
}

SubclassOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubclassOfContext.prototype.constructor = SubclassOfContext;

SubclassOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

SubclassOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

SubclassOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterSubclassOf(this);
	}
};

SubclassOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitSubclassOf(this);
	}
};




rulePadGrammarParser.SubclassOfContext = SubclassOfContext;

rulePadGrammarParser.prototype.subclassOf = function() {

    var localctx = new SubclassOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, rulePadGrammarParser.RULE_subclassOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 757;
        this.of();
        this.state = 758;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubclassConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_subclassCondition;
    return this;
}

SubclassConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubclassConditionContext.prototype.constructor = SubclassConditionContext;

SubclassConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

SubclassConditionContext.prototype.subclassExpression = function() {
    return this.getTypedRuleContext(SubclassExpressionContext,0);
};

SubclassConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterSubclassCondition(this);
	}
};

SubclassConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitSubclassCondition(this);
	}
};




rulePadGrammarParser.SubclassConditionContext = SubclassConditionContext;

rulePadGrammarParser.prototype.subclassCondition = function() {

    var localctx = new SubclassConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, rulePadGrammarParser.RULE_subclassCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 760;
        this.withWord();
        this.state = 761;
        this.subclassExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubclassExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_subclassExpression;
    this.left = null; // SubclassExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // SubclassExpressionContext
    return this;
}

SubclassExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubclassExpressionContext.prototype.constructor = SubclassExpressionContext;

SubclassExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

SubclassExpressionContext.prototype.subclassExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubclassExpressionContext);
    } else {
        return this.getTypedRuleContext(SubclassExpressionContext,i);
    }
};

SubclassExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

SubclassExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

SubclassExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

SubclassExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

SubclassExpressionContext.prototype.classNames = function() {
    return this.getTypedRuleContext(ClassNamesContext,0);
};

SubclassExpressionContext.prototype.extensions = function() {
    return this.getTypedRuleContext(ExtensionsContext,0);
};

SubclassExpressionContext.prototype.implementations = function() {
    return this.getTypedRuleContext(ImplementationsContext,0);
};

SubclassExpressionContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

SubclassExpressionContext.prototype.subclasses = function() {
    return this.getTypedRuleContext(SubclassesContext,0);
};

SubclassExpressionContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

SubclassExpressionContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

SubclassExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

SubclassExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

SubclassExpressionContext.prototype.comments = function() {
    return this.getTypedRuleContext(CommentsContext,0);
};

SubclassExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

SubclassExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

SubclassExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterSubclassExpression(this);
	}
};

SubclassExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitSubclassExpression(this);
	}
};



rulePadGrammarParser.prototype.subclassExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new SubclassExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 144;
    this.enterRecursionRule(localctx, 144, rulePadGrammarParser.RULE_subclassExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 784;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        switch(la_) {
        case 1:
            this.state = 764;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 765;
            this.subclassExpression(0);
            this.state = 766;
            this.match(rulePadGrammarParser.RPAREN);
            break;

        case 2:
            this.state = 782;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
            switch(la_) {
            case 1:
                this.state = 768;
                this.annotations();
                break;

            case 2:
                this.state = 769;
                this.specifiers();
                break;

            case 3:
                this.state = 770;
                this.visibilities();
                break;

            case 4:
                this.state = 771;
                this.classNames();
                break;

            case 5:
                this.state = 772;
                this.extensions();
                break;

            case 6:
                this.state = 773;
                this.implementations();
                break;

            case 7:
                this.state = 774;
                this.functions();
                break;

            case 8:
                this.state = 775;
                this.subclasses();
                break;

            case 9:
                break;

            case 10:
                this.state = 777;
                this.abstractFunctions();
                break;

            case 11:
                this.state = 778;
                this.constructors();
                break;

            case 12:
                this.state = 779;
                this.declarationStatements();
                break;

            case 13:
                this.state = 780;
                this.returnValues();
                break;

            case 14:
                this.state = 781;
                this.comments();
                break;

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 794;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 792;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SubclassExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_subclassExpression);
                    this.state = 786;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 787;
                    localctx.op = this.binary();
                    this.state = 788;
                    localctx.right = this.subclassExpression(4);
                    break;

                case 2:
                    localctx = new SubclassExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_subclassExpression);
                    this.state = 790;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 791;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 796;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


rulePadGrammarParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 33:
			return this.functionExpression_sempred(localctx, predIndex);
	case 37:
			return this.abstractFunctionExpression_sempred(localctx, predIndex);
	case 41:
			return this.constructorExpression_sempred(localctx, predIndex);
	case 44:
			return this.parameterExpression_sempred(localctx, predIndex);
	case 56:
			return this.declarationStatementExpression_sempred(localctx, predIndex);
	case 60:
			return this.expressionStatementExpression_sempred(localctx, predIndex);
	case 68:
			return this.classExpression_sempred(localctx, predIndex);
	case 72:
			return this.subclassExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

rulePadGrammarParser.prototype.functionExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

rulePadGrammarParser.prototype.abstractFunctionExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 3);
		case 3:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

rulePadGrammarParser.prototype.constructorExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.precpred(this._ctx, 3);
		case 5:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

rulePadGrammarParser.prototype.parameterExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 3);
		case 7:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

rulePadGrammarParser.prototype.declarationStatementExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 3);
		case 9:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

rulePadGrammarParser.prototype.expressionStatementExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 10:
			return this.precpred(this._ctx, 3);
		case 11:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

rulePadGrammarParser.prototype.classExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 12:
			return this.precpred(this._ctx, 3);
		case 13:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

rulePadGrammarParser.prototype.subclassExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 14:
			return this.precpred(this._ctx, 3);
		case 15:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.rulePadGrammarParser = rulePadGrammarParser;
